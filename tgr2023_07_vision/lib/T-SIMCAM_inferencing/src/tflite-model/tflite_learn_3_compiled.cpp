/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 18.09.2024 11:02:53

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 368224;
#else
constexpr int kTensorArenaSize = 367200;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,120,120,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0025836217682808638, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 33168, -36815, -35835, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00015179066394921392, 0.00015667363186366856, 0.0001571473985677585, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 94,91,127,-78,-74,8,-21,29,-16,51,30,-27,-48,-107,106,24,-67,71,90,119,-9,-15,50,-98,-117,124,-71,10,80,20,-23,-15, 
  /* [1][0][][] */ 45,-43,-73,15,-10,127,-31,-9,123,-55,-4,-92,-63,107,30,-54,93,-46,-7,-105,-115,18,115,64,22,11,2,-13,-74,-54,-3,-39, 
  /* [2][0][][] */ -32,71,-82,75,84,-43,-36,116,94,36,127,-20,-98,-88,81,119,-83,-51,-1,-116,65,115,-47,-89,82,-69,-16,-118,21,-76,83,-20, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0031310736667364836, 0.0032317976001650095, 0.0032415702007710934, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -134, -169, 73, -70, 114, -24, 101, 136, 98, 112, 121, 834, -320, 37, -3, 161, -336, -373, -77, -74, -331, -18, -266, -337, -74, 910, -295, -251, 188, -164, -485, -309, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.1354265704285353e-05, 4.4011198042426258e-05, 4.3501218897290528e-05, 4.5174219849286601e-05, 4.2825751734199002e-05, 4.1897637856891379e-05, 4.4533833715831861e-05, 4.2976793338311836e-05, 4.1698058339534327e-05, 4.3496180296642706e-05, 4.5582561142509803e-05, 4.5366676204139367e-05, 4.1843879444058985e-05, 4.2370731534902006e-05, 4.6119836042635143e-05, 4.2370273149572313e-05, 4.2398223740747198e-05, 4.215161970932968e-05, 4.0531682316213846e-05, 4.6709192247362807e-05, 3.9309310523094609e-05, 4.6125827793730423e-05, 4.0937833546195179e-05, 4.4094791519455612e-05, 4.3900818127440289e-05, 4.6049815864535049e-05, 4.1775747376959771e-05, 4.1296469134977087e-05, 3.780769111472182e-05, 4.0571292629465461e-05, 4.2954929085681215e-05, 4.1466711991233751e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -43,-42,111,11,105,-12,-97,-105,67,-107,-118,-4,50,8,-43,51,-62,-38,-59,-62,-78,-113,1,108,-122,3,75,-30,112,2,-27,-89,91,-69,-103,84,-116,-89,-85,25,72,-95,-107,101,49,-118,106,-25,17,-44,-45,94,-60,-54,-104,107,47,64,120,-118,-84,82,-57,48,-13,11,69,96,52,96,85,-127,100,-108,40,108,-98,11,-67,51,50,16,92,-10,-67,-48,-94,102,25,116,11,-117,10,67,25,16, 
  /* [1][0][][] */ -54,21,-76,-18,-45,77,36,10,65,-107,-103,101,57,-34,22,59,105,-48,47,117,-55,-10,31,26,35,16,-46,102,2,-3,87,-69,49,94,-7,17,45,60,-9,-68,-62,2,-25,-95,-36,27,-27,-53,-33,-91,96,62,5,72,-75,-50,15,88,64,75,-68,108,-63,-91,-56,29,70,29,103,25,16,2,-113,89,-48,33,68,-49,-47,56,-86,71,-55,-127,22,115,-75,-71,69,77,85,18,71,86,26,-4, 
  /* [2][0][][] */ 40,38,-39,98,-31,-45,88,98,-94,87,-38,127,83,-16,83,-110,-55,-29,58,47,-99,-12,112,23,-25,72,103,31,-61,73,78,87,-69,-22,-90,-105,-76,89,108,-28,-120,-79,13,-7,-85,112,-31,-76,97,46,84,-93,-25,59,19,13,-46,88,-66,5,-22,72,-41,72,84,42,53,85,-99,66,14,-78,31,-79,34,44,-57,-21,7,16,35,-97,-12,-46,0,-99,-21,-37,87,110,-4,-1,-50,-86,-47,-67, 
  /* [3][0][][] */ 79,-6,19,-25,-58,49,-104,29,41,15,67,-13,74,95,72,8,97,98,-69,22,113,-84,-63,-108,-18,-98,-76,85,26,-95,82,13,-53,-30,-5,-22,-96,-16,21,48,-17,-82,-99,2,75,31,-37,-78,66,-96,41,9,74,32,91,-88,-127,-108,-106,-57,-86,18,-27,60,62,-28,-61,-32,-27,-83,-1,105,24,-96,55,-63,28,92,91,-69,-86,-110,31,92,28,48,-40,-107,-79,43,-18,-99,96,-93,-87,22, 
  /* [4][0][][] */ 63,94,-21,50,-19,-21,37,9,50,86,0,40,21,-30,-7,-59,-21,2,-80,21,114,-88,90,31,-11,7,69,-79,-65,33,-63,-46,73,120,24,-116,-51,3,-127,54,-41,-53,-74,-83,40,113,45,62,27,-64,-14,-65,-108,51,-80,27,21,-88,35,19,15,-82,-28,-77,-36,62,3,-35,33,-105,-98,-73,-46,25,107,34,50,-19,-5,-71,9,-37,-98,-14,5,78,96,10,-117,-70,22,48,37,99,-94,-16, 
  /* [5][0][][] */ 89,-87,75,80,50,-127,21,45,112,-124,-4,-78,28,102,30,37,54,67,-100,100,34,49,16,-42,-104,-60,-19,-107,47,33,17,-96,-35,5,-89,23,-124,-40,39,24,-90,-50,45,89,-31,28,32,-56,-107,105,28,17,25,21,27,-20,93,56,-64,-40,38,-84,31,-71,-30,107,-32,34,73,4,89,-65,-58,86,-42,-75,16,-54,12,89,113,48,24,115,-82,78,-2,45,72,-114,116,98,-11,25,58,-83, 
  /* [6][0][][] */ 15,-35,127,82,-79,-58,3,68,0,-66,8,-73,83,58,116,-111,46,7,24,100,-72,-107,112,62,-57,-79,-1,-38,-15,-104,49,-75,-75,-113,-39,-93,2,38,-102,81,84,56,28,-13,-105,103,-86,-39,-73,28,-21,-64,74,-52,93,-24,23,-8,-65,114,-90,23,63,-58,-50,65,105,-41,78,-1,-95,-4,56,-60,-75,-21,-68,-90,-47,-10,37,-21,45,-25,-65,-82,-35,-91,86,94,111,18,-47,-62,75,-24, 
  /* [7][0][][] */ 125,63,-57,-46,-66,118,-16,-1,108,0,-92,9,45,-84,50,78,55,21,-21,119,58,37,-3,90,-63,110,44,36,-90,102,-17,40,26,28,72,88,-107,94,-8,-24,101,-71,83,74,56,2,111,-108,56,-76,-111,-61,-46,90,22,35,101,-86,11,-55,11,-15,87,-127,-63,-50,68,23,-105,16,67,91,91,28,62,40,-73,57,-98,32,93,-31,-17,-70,90,40,-106,99,82,9,64,62,-52,-42,-1,-66, 
  /* [8][0][][] */ 21,36,-59,-96,71,28,-74,-26,6,35,51,89,9,-42,-85,-70,-70,103,-91,25,36,-25,86,115,-115,104,50,58,-76,23,-90,127,100,-29,51,-2,117,10,-21,77,89,112,-111,-118,-5,-24,-16,115,25,-103,-62,5,-85,-4,-29,-105,30,117,-91,110,122,31,51,111,-26,-42,-23,106,-82,56,29,7,83,79,9,12,-44,111,87,73,40,91,-115,-82,30,49,81,-36,41,-38,-101,112,-75,-103,-51,66, 
  /* [9][0][][] */ 2,8,119,56,67,-105,-45,-89,48,54,-6,74,-12,-71,-99,-22,13,-3,-74,-69,8,104,-104,-97,117,-13,-10,51,15,-56,-83,98,39,0,31,-17,-62,14,-8,-35,46,-68,60,-82,78,26,-107,59,42,6,-73,-44,99,-77,-68,101,94,-55,2,1,-84,109,75,-79,-85,9,112,57,-39,107,127,-97,27,76,-102,-80,-72,-114,-32,107,35,27,117,36,-39,-92,42,-12,103,42,-3,105,110,1,75,-30, 
  /* [10][0][][] */ -52,73,66,-68,-9,102,105,26,27,24,27,-71,81,81,-29,14,-31,79,-113,-54,-14,28,56,-63,35,58,-108,-127,-57,71,-87,-74,82,97,117,59,-40,12,-30,36,-28,114,-109,-31,-87,-50,4,-53,1,-18,34,17,38,22,-56,-29,-110,-12,34,-41,1,64,111,20,116,-67,-92,-22,24,-30,-89,-58,87,65,-76,84,-21,62,64,8,74,4,53,101,-93,70,98,-19,34,11,-26,-67,-46,-52,-42,-70, 
  /* [11][0][][] */ 117,34,4,117,127,71,68,51,120,112,-55,125,8,-60,40,-40,-32,-85,82,36,43,90,45,-85,-76,-88,-6,88,96,11,42,-16,-77,-53,69,65,-35,80,-7,-39,-13,115,-51,29,-31,-42,-78,-67,84,119,106,63,-66,-76,20,26,-39,-34,-6,-60,-67,105,97,15,51,97,-33,44,92,74,-53,-56,65,99,-71,72,-45,56,-25,104,-89,-3,-50,-28,59,-58,36,-13,-77,9,33,-97,-68,-19,-49,-18, 
  /* [12][0][][] */ 4,64,-48,-6,81,2,-44,32,-86,60,-24,16,-53,5,42,-89,-108,-42,-25,-90,19,-18,10,93,-77,-60,94,-87,96,7,-45,110,-97,-80,-56,10,-7,-86,-22,35,109,32,-121,-48,-30,-94,-50,113,-54,-116,-86,98,52,-8,-91,79,-8,-69,48,61,51,122,-15,51,106,25,-54,113,50,97,40,64,78,108,-23,-1,-44,29,-127,-102,-67,98,41,7,-45,24,47,109,-103,-119,100,36,95,-21,23,72, 
  /* [13][0][][] */ 105,-52,103,93,108,116,79,53,83,-102,12,-34,98,76,66,-44,-121,-61,-98,34,73,-27,122,-55,-61,45,8,7,-89,-85,88,46,52,114,-29,46,-86,-30,20,76,-62,83,-48,7,-37,35,-4,-31,44,103,-28,-116,-114,42,98,-77,-46,37,-28,-69,-18,118,-82,25,-49,-58,-95,97,-36,-7,89,9,-98,51,-82,-40,-98,69,86,-53,61,-89,93,30,-79,-106,100,127,-5,-61,-78,65,126,-46,57,-1, 
  /* [14][0][][] */ -53,-91,81,50,63,-34,-15,-120,-90,-33,62,61,-28,-90,-84,-97,-48,-54,8,25,-40,31,-2,56,-126,-65,-29,20,-127,-121,-69,37,85,-19,-31,-11,72,110,23,-119,-4,-104,36,66,64,-121,62,-78,94,21,61,49,84,-12,-14,14,-65,3,33,68,-28,-75,-26,71,-84,-16,72,-117,-81,-82,-89,85,-5,79,48,-82,35,-102,49,15,44,-30,-108,-52,-107,-86,-119,82,104,9,64,-63,62,98,-14,62, 
  /* [15][0][][] */ 28,-41,-43,74,95,-81,70,-91,45,-5,-63,10,104,9,-84,-107,97,16,-94,30,55,24,79,118,90,80,46,86,12,53,72,-97,4,13,-54,-17,-65,124,119,-62,26,122,-52,-15,33,-72,-33,-74,-5,-88,-7,42,-111,-98,-43,-1,57,58,-38,116,-41,-73,11,93,-27,107,-68,2,-55,4,69,-67,28,-11,65,-124,-13,62,111,65,-80,65,-103,-59,-116,-27,-87,46,88,78,-127,-46,57,114,-100,116, 
  /* [16][0][][] */ -76,11,107,-63,56,110,-61,27,61,53,-115,69,-5,-50,-59,-63,102,87,49,67,111,75,-44,45,-36,51,-72,58,-96,22,39,20,-96,82,50,69,-38,48,-62,-71,16,-51,80,82,64,109,97,-20,-50,-107,15,104,-46,125,62,48,35,97,63,14,127,114,28,75,56,13,-42,104,45,107,-37,1,24,101,59,95,0,95,-113,-2,24,-77,54,22,10,95,105,16,85,5,-11,124,85,-28,-93,29, 
  /* [17][0][][] */ 28,-119,36,80,-54,-119,-75,-104,40,-95,79,48,97,55,-125,43,26,47,116,113,-103,-20,7,-60,17,61,-88,29,104,-58,-40,72,-39,-31,26,1,-57,95,-94,-38,-105,-50,-22,-18,-1,5,80,-120,80,109,-20,19,-18,74,96,-83,-120,81,-93,-122,26,-103,68,100,-95,-83,37,-110,-117,-7,106,22,8,-127,-76,65,113,-57,36,-63,4,-24,-84,-101,-122,66,75,-42,14,73,-104,-125,-20,95,9,13, 
  /* [18][0][][] */ -97,105,116,-65,-9,-110,-110,18,-7,79,-115,-46,-27,35,63,-63,23,-27,76,-26,106,-49,22,-83,30,-104,-20,123,30,35,0,44,46,-31,-106,-113,-33,34,-30,65,-45,-2,-53,-9,-122,15,24,-5,17,-27,75,31,-95,-11,2,90,-28,37,-20,-123,88,116,12,39,-72,-127,-33,93,72,-62,-58,113,-103,-43,-78,-107,56,59,-3,-77,-61,-9,-28,-72,106,-37,73,69,-115,-79,-55,110,91,-57,52,-10, 
  /* [19][0][][] */ 18,30,94,50,47,-76,90,88,100,-41,27,-2,-83,33,-47,54,67,-91,127,70,-16,77,-50,14,68,-73,30,-36,-80,-100,-56,45,79,-70,36,2,7,-62,-49,-89,41,-106,-68,8,-74,27,70,-84,-22,58,-25,41,-5,20,9,4,36,89,-5,-25,54,-20,91,72,-65,-1,-20,6,-8,66,68,-47,-58,-97,-49,-56,-18,-102,18,110,57,-106,-20,72,-77,-7,8,-3,87,31,10,60,-30,114,74,-26, 
  /* [20][0][][] */ -8,71,75,101,-100,78,16,68,12,13,-98,5,-10,91,41,-84,-59,-46,-53,-34,21,-53,-88,-78,79,-84,-117,57,23,12,-48,119,100,43,-5,56,42,-39,-14,-122,-96,-42,-98,-113,-34,-73,-79,111,60,-127,-111,48,57,116,57,-3,92,74,110,91,117,-65,-75,-42,-32,-76,-60,11,-92,-83,-69,80,-73,-96,36,18,114,79,115,111,89,1,95,-30,60,121,-21,76,18,104,29,67,19,25,11,5, 
  /* [21][0][][] */ 92,64,45,-104,94,-75,68,3,-13,-73,-65,26,6,36,-49,-84,-98,-27,3,-11,101,-49,64,-78,54,-75,-31,47,-4,0,-10,-19,4,18,-83,-116,97,94,-127,-31,-3,8,17,-12,-91,-76,-69,84,-22,-82,-8,86,12,64,-88,26,-64,51,-43,110,53,-89,17,-33,80,31,-38,-69,-104,-15,52,76,33,-23,64,44,-108,-30,55,86,10,94,31,-67,22,-87,60,-74,-99,72,82,-105,-39,-68,61,-41, 
  /* [22][0][][] */ 25,-56,-74,-100,93,-65,106,54,-94,88,-85,-112,123,-122,-126,-96,33,85,-124,-67,89,-83,27,25,93,-10,-126,107,-62,-86,-72,-115,43,61,10,16,-4,-23,-67,-126,-5,-19,5,93,55,-126,90,-30,-73,-83,4,-27,-65,-99,-56,34,-19,-35,-30,-38,111,-87,-90,-127,-76,15,-126,-46,110,113,-33,-4,-79,6,60,-92,49,-61,63,105,109,-108,-82,-121,79,81,100,-39,-62,27,-84,68,19,19,-39,106, 
  /* [23][0][][] */ 51,-91,5,51,88,-120,-6,-106,56,-82,73,67,17,-113,8,-47,76,-42,-127,89,81,-88,92,-43,-24,-25,71,18,64,40,61,-45,-44,32,9,36,86,-17,-121,-4,-113,-10,1,-116,-78,-98,100,17,67,-109,-87,-61,76,-68,-62,80,-85,-29,88,35,-118,-96,-63,-5,22,26,-122,-114,51,-20,101,-81,-15,-39,-47,-88,42,-30,82,116,-62,-58,14,-111,82,-3,101,-31,-96,33,95,-12,94,-57,-39,78, 
  /* [24][0][][] */ -92,-63,-107,-67,-100,-118,-67,-94,66,100,80,43,115,60,-40,-127,-81,40,13,-58,95,-79,-57,-36,37,-28,71,56,105,49,1,-72,-4,6,51,12,-55,-86,49,-21,-73,-97,100,1,5,-38,31,70,-99,-45,-20,16,69,41,54,-71,-20,76,18,0,90,-16,21,75,-105,95,-46,-87,-107,51,-56,-25,-54,25,76,97,63,-76,-103,-96,-78,-96,-60,-114,1,59,-14,-97,27,-108,-7,-81,-17,30,-105,29, 
  /* [25][0][][] */ -83,-32,-46,18,81,-59,-79,71,63,-82,-23,46,70,13,-80,-6,-46,67,51,-102,74,99,9,-32,30,-53,-83,64,97,-76,54,113,96,-93,47,84,116,-49,-1,-6,-69,103,-81,25,109,49,64,56,-84,109,-73,9,64,-13,-34,20,3,57,-75,86,111,65,46,50,9,86,6,1,-78,4,1,-104,49,-105,83,46,78,89,33,40,61,54,-25,82,-50,-32,-80,-79,-8,-15,127,14,-110,11,-3,-63, 
  /* [26][0][][] */ 53,-121,-34,-16,-97,-1,-14,-20,-109,-127,106,84,-76,-51,7,-17,113,30,-98,-70,13,71,99,10,49,63,11,33,8,15,-98,-3,-28,-63,-102,-101,-72,84,-58,111,-104,102,57,28,-78,72,-45,100,-24,27,3,99,-1,-47,-8,-112,112,66,52,25,3,-100,65,-5,116,-23,-61,61,-89,84,87,98,79,-100,-89,2,54,-114,-102,18,-31,77,83,-78,78,-3,-49,12,-84,114,-2,27,-55,118,51,91, 
  /* [27][0][][] */ 8,6,-64,-108,-127,-73,-76,-21,44,101,34,-111,-30,55,82,-34,65,-20,73,-88,-100,8,-33,-28,-111,44,-115,6,65,26,-37,-13,61,68,-95,-91,-96,-71,-118,88,-102,14,26,14,99,22,67,103,90,75,61,-81,-86,-92,-9,-38,110,-29,-119,-85,-62,-66,-39,59,38,-52,-119,106,48,9,-123,4,59,-57,-11,-90,46,-72,87,109,84,-32,118,-62,-80,-90,-38,28,-53,-7,-35,-56,54,16,88,57, 
  /* [28][0][][] */ 109,-1,98,51,-122,-71,-108,-71,-45,-116,74,84,-89,-92,4,125,114,126,-66,79,-27,30,-115,-81,-120,93,-97,-55,-68,-70,4,-23,-116,22,94,86,33,-118,-16,41,122,54,-106,70,-124,-5,21,60,29,-63,-91,-32,-77,27,59,41,59,-5,96,70,-8,-47,-100,10,73,86,-20,95,-89,32,-108,-44,91,37,1,-106,-127,-63,-95,53,-86,-99,123,-28,71,-118,83,-91,-118,-76,-27,-58,-47,56,-106,-68, 
  /* [29][0][][] */ 49,58,78,-52,-98,12,-126,12,108,-9,-98,-86,111,-112,-51,-50,-103,104,57,-72,-82,-35,57,5,-40,2,-48,-1,-94,-10,109,-8,52,-1,-88,-54,-6,103,-7,97,47,109,-46,85,-3,108,-62,-27,17,17,58,-105,104,-108,116,46,-79,56,-56,113,-127,117,-105,-47,-68,-70,57,93,98,-87,40,-81,114,77,65,42,119,-65,-32,43,-7,-91,-9,-84,66,118,44,78,-40,101,94,81,-112,18,-2,65, 
  /* [30][0][][] */ 19,-77,-73,31,-98,14,-75,-21,109,-26,-12,-45,-100,15,47,11,-15,24,92,-113,34,-111,-123,2,-117,13,-77,115,-14,-108,-97,-5,-88,-81,-125,-62,6,-29,-10,20,77,-86,-19,87,92,-51,90,49,-80,75,17,-113,94,-61,-22,91,-83,-55,-85,-55,-106,-13,-84,-28,-113,-98,-104,87,-68,105,47,-38,-90,95,28,-92,-59,-81,-85,-66,20,27,-109,-24,-117,17,-109,100,-44,-127,70,50,-35,-15,1,-73, 
  /* [31][0][][] */ 80,-91,66,109,48,62,-66,-104,-6,-9,-86,-88,111,-126,-52,111,-67,-94,49,52,65,34,-36,107,42,-122,38,65,-74,-73,50,111,20,20,-99,17,97,-36,-71,-119,58,-76,-31,29,3,-59,-45,23,73,46,113,-35,-100,-60,-86,38,-116,71,1,114,-35,11,85,-57,70,113,-50,-80,74,-101,-127,6,-105,-36,3,28,-60,-52,49,106,-80,-43,81,74,56,96,-102,14,21,-54,-67,-37,13,109,0,-18, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017575562233105302, 0.0018704759422689676, 0.0018488017376512289, 0.0019199043745175004, 0.0018200944177806377, 0.0017806496471166611, 0.001892687869258225, 0.0018265136750414968, 0.0017721673939377069, 0.0018485876498743892, 0.0019372588722035289, 0.0019280837150290608, 0.0017783648800104856, 0.0018007560865953565, 0.0019600929226726294, 0.0018007366452366114, 0.0018019244307652116, 0.0017914437921717763, 0.001722596469335258, 0.001985140610486269, 0.001670645666308701, 0.0019603476393967867, 0.0017398579511791468, 0.0018740285886451602, 0.0018657847540453076, 0.0019571171142160892, 0.0017754692817106843, 0.0017550999764353037, 0.0016068269032984972, 0.0017242799513041973, 0.0018255844479426742, 0.0017623351886868477, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2134, 4027, 9124, 2709, -3529, -3556, 20809, 2177, 3183, -1754, 10346, -327, -10263, 2483, 18985, 6505, 14672, 5715, -5056, -8114, 4247, 30167, 32509, 20508, 1162, 759, 4815, 3408, 2507, -5103, 6761, -2721, -242, 4787, 85, 1155, 12085, 5095, -1766, 5570, 8641, 4729, 5014, 14748, 4902, 4117, 2011, 8016, 4269, -5112, -7807, 445, -271, -1344, 2930, -45, 123, -1048, -5404, 13434, -1037, 1658, -1232, -1685, -4068, 6772, 19637, 2109, -2647, 834, 1756, 2145, 2174, -1461, 681, 14731, -526, 27330, 19198, -1082, 11963, 2236, -528, 1489, 15446, 8422, 5188, 1380, 5689, 4353, -303, -7606, 732, -2265, -1913, -1931, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00029085588175803423, 0.00038808205863460898, 0.00026375416200608015, 0.00032400965574197471, 0.00029636875842697918, 0.00041391764534637332, 0.00016019702889025211, 0.00032628892222419381, 0.0001916857436299324, 0.00036906037712469697, 0.00019098194024991244, 0.0002404786937404424, 0.00024931025109253824, 0.001133413054049015, 0.00016272203356493264, 0.00017890091112349182, 0.00012747694563586265, 0.00025386569905094802, 0.00037806472391821444, 0.00020781812781933695, 0.00014637559070251882, 9.0439578343648463e-05, 9.4522780273109674e-05, 8.2239595940336585e-05, 0.00015736347995698452, 0.00065075146267190576, 0.00062059122137725353, 0.00030880249687470496, 0.00020798623154405504, 0.00038779314490966499, 0.00021696163457818329, 0.00028436051798053086, 0.00022783686290495098, 0.00024236903118435293, 0.00031521479832008481, 0.00021907550399191678, 0.00015740357048343867, 0.00021249287237878889, 0.00033656295272521675, 0.00031802838202565908, 0.0001487892004661262, 0.0005486974841915071, 0.00030442385468631983, 0.0001573700865264982, 0.0003905023040715605, 0.00024541758466511965, 0.00025469952379353344, 0.00026718375738710165, 0.00031440446036867797, 0.00025239906972274184, 0.00020346749806776643, 0.00016382857575081289, 0.00042200816096737981, 0.00022395484847947955, 0.0002643484331201762, 0.00029291477403603494, 0.00065951782744377851, 0.00026347319362685084, 0.00028748629847541451, 0.000136971240863204, 0.00071251601912081242, 0.00041102129034698009, 0.00021342582476790994, 0.00045723561197519302, 0.00046176483738236129, 0.00028377727721817791, 0.00011124012235086411, 0.00018820064724422991, 0.00044008134864270687, 0.00040455145062878728, 0.00021514116087928414, 0.00022740518033970147, 0.00061520654708147049, 0.00028289688634686172, 0.00026403352967463434, 0.00014594403910450637, 0.00026050215819850564, 6.8833141995128244e-05, 9.5232673629652709e-05, 0.00018693771562539041, 0.00012326563592068851, 0.00014876649947836995, 0.0001705924078123644, 0.00017656644922681153, 0.00011691961844917387, 0.00027975978446193039, 0.00044775669812224805, 0.00020543640130199492, 0.00012654707825277001, 0.00047092937165871263, 0.00025250503676943481, 0.00025787690537981689, 0.00027749696164391935, 0.00045693112770095468, 0.00033027332392521203, 0.00021094715339131653, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -34,90,-5,-127,-42,-36,-29,-64,-23,6,1,71,11,-61,-5,49, 
  /* [1][0][][] */ -36,28,-64,-7,-30,-20,30,-80,55,56,-53,23,9,-2,31,-127, 
  /* [2][0][][] */ -10,-6,-46,27,51,11,-64,-81,127,-52,-12,5,-31,97,-67,26, 
  /* [3][0][][] */ 55,-70,12,-111,12,-24,-15,9,127,7,85,49,4,54,13,127, 
  /* [4][0][][] */ -81,41,7,31,0,-27,-1,31,-1,1,12,-27,-127,-16,-7,26, 
  /* [5][0][][] */ -4,76,114,0,20,88,-73,78,-62,71,-20,-31,26,-53,-127,25, 
  /* [6][0][][] */ 28,-43,104,-127,30,1,-33,85,-80,-102,46,-27,-4,76,-19,86, 
  /* [7][0][][] */ 38,106,-21,-52,96,11,0,-40,127,98,-25,25,33,-18,60,40, 
  /* [8][0][][] */ 8,-86,6,-93,21,-61,22,-81,21,57,72,-12,11,127,87,64, 
  /* [9][0][][] */ 9,-28,-9,127,40,-9,41,-59,-66,113,34,-20,-6,-65,-10,-4, 
  /* [10][0][][] */ -12,15,-48,-127,9,-7,-13,34,38,-43,12,-33,-23,-42,7,32, 
  /* [11][0][][] */ 2,22,20,-23,83,-30,90,-60,-88,35,-2,30,-1,127,-71,-30, 
  /* [12][0][][] */ 67,-5,-112,-1,35,-73,21,28,14,60,-70,-42,-45,127,-6,26, 
  /* [13][0][][] */ -16,6,-23,7,6,-127,-4,18,0,-15,8,-2,11,-17,7,16, 
  /* [14][0][][] */ 28,-31,96,-23,62,9,-127,-80,-10,-34,32,20,16,-50,-22,-36, 
  /* [15][0][][] */ -82,18,-23,-55,-5,1,127,43,-41,36,65,-32,8,74,70,8, 
  /* [16][0][][] */ 15,71,127,90,2,17,94,69,-102,5,-82,-15,7,2,15,-77, 
  /* [17][0][][] */ -43,-102,-17,26,-69,-25,-55,15,-127,-35,12,-48,-9,36,62,-35, 
  /* [18][0][][] */ -7,43,-5,54,26,-8,36,-15,66,54,-44,-16,24,127,70,25, 
  /* [19][0][][] */ 3,-25,32,4,101,14,-94,-75,-116,-87,-40,-127,-52,-55,9,-44, 
  /* [20][0][][] */ 82,-21,-63,-41,5,-127,21,17,-61,20,-106,-24,11,-5,31,6, 
  /* [21][0][][] */ 64,-43,61,-29,-26,-10,0,90,-3,-101,63,29,-8,127,59,83, 
  /* [22][0][][] */ -35,54,-50,127,-61,-2,104,66,-18,26,-21,38,-16,-1,39,0, 
  /* [23][0][][] */ 62,15,103,-107,69,-13,-4,44,1,5,-6,-29,-14,-28,-127,40, 
  /* [24][0][][] */ -127,47,15,-16,5,115,26,-19,-4,25,108,-6,-75,20,55,-28, 
  /* [25][0][][] */ 22,29,10,19,9,10,70,-48,-8,-127,-11,-16,-16,-33,15,21, 
  /* [26][0][][] */ -38,-4,-1,8,-49,-11,-41,-36,-108,-37,1,-34,9,127,-35,51, 
  /* [27][0][][] */ 1,32,12,59,40,-28,-22,-38,58,1,-23,-6,4,127,-10,18, 
  /* [28][0][][] */ 19,73,63,69,127,-5,28,44,-88,-17,-47,-31,23,100,43,-41, 
  /* [29][0][][] */ -1,0,8,17,33,3,10,36,-22,-12,-12,-127,-3,-17,-19,2, 
  /* [30][0][][] */ -18,78,-46,80,-38,-18,39,-127,-40,63,-14,0,63,42,77,82, 
  /* [31][0][][] */ -30,-28,-5,-62,-2,-2,-54,-107,27,82,-12,-127,-24,-38,-2,19, 
  /* [32][0][][] */ -127,-71,-14,54,50,34,-9,6,-8,-48,-105,47,69,-3,60,74, 
  /* [33][0][][] */ -18,-32,-45,-13,-91,-13,-75,1,57,9,10,-51,21,-122,127,36, 
  /* [34][0][][] */ 42,-3,59,20,40,16,-42,75,-85,-49,64,21,8,-11,-14,127, 
  /* [35][0][][] */ -47,51,-82,13,-13,-27,35,-127,84,90,-92,-2,-2,-12,90,-125, 
  /* [36][0][][] */ -25,42,8,116,44,22,127,23,-19,35,-37,-16,-2,13,-74,-46, 
  /* [37][0][][] */ 0,1,9,-69,7,6,-28,-40,-80,-7,8,-2,-3,-127,48,-28, 
  /* [38][0][][] */ 40,95,-15,-53,127,0,36,-37,112,76,-15,-3,6,-32,44,14, 
  /* [39][0][][] */ -35,63,-9,-127,-16,4,-44,34,51,-83,-31,-23,5,79,52,24, 
  /* [40][0][][] */ -7,-13,13,-89,7,-5,2,-28,-127,-4,-7,-19,-15,-120,72,-55, 
  /* [41][0][][] */ -13,-9,-43,-18,7,-25,23,-4,-32,15,-43,-5,-127,7,23,29, 
  /* [42][0][][] */ 127,85,-35,-19,-86,-64,-17,-57,8,16,82,-63,-70,55,116,-122, 
  /* [43][0][][] */ -14,113,-82,11,69,-38,124,-45,76,115,-63,-12,30,-127,-80,-77, 
  /* [44][0][][] */ -28,-4,6,-38,56,12,-83,-127,-19,-2,12,3,-9,-37,70,-63, 
  /* [45][0][][] */ -14,35,-127,-33,23,-85,17,-82,19,40,4,-84,29,-15,70,-31, 
  /* [46][0][][] */ 6,-6,-23,-91,-14,8,20,-34,-118,-29,6,11,-15,-127,75,-35, 
  /* [47][0][][] */ 22,47,26,-11,127,-16,-26,17,-49,41,-2,19,6,4,106,-30, 
  /* [48][0][][] */ -127,-72,-21,34,66,21,10,-17,-6,-15,-103,47,67,7,74,58, 
  /* [49][0][][] */ 12,8,95,77,112,-3,44,32,-127,-50,-39,-80,12,118,24,-59, 
  /* [50][0][][] */ 31,-24,-87,-9,22,-127,-45,-16,-15,-21,-3,-42,42,-13,-11,13, 
  /* [51][0][][] */ 15,37,51,18,35,3,-5,24,-127,64,2,-126,17,-114,-34,94, 
  /* [52][0][][] */ 0,48,-8,54,38,-2,24,48,69,91,-23,-46,40,127,64,24, 
  /* [53][0][][] */ -10,-46,-22,-22,-83,-13,-75,-2,42,14,11,-61,23,-127,123,20, 
  /* [54][0][][] */ 58,-23,-36,16,127,77,-122,-47,-69,-2,-36,-81,8,-34,-17,-47, 
  /* [55][0][][] */ 52,-8,9,7,42,-34,-72,-127,-29,-64,-55,12,1,-21,13,-11, 
  /* [56][0][][] */ -18,20,22,-22,-4,-22,-89,67,-11,127,-4,-17,25,4,-6,5, 
  /* [57][0][][] */ -3,11,-45,-18,-52,-58,114,84,-22,28,-13,-8,22,29,127,-14, 
  /* [58][0][][] */ 59,26,-127,44,104,113,-43,60,-103,-36,-3,6,-30,35,-8,-32, 
  /* [59][0][][] */ -94,76,107,19,-72,-56,127,127,16,7,33,-12,17,9,64,2, 
  /* [60][0][][] */ 2,-5,-54,-7,17,-127,-19,-5,-15,-22,-8,-25,22,-20,8,7, 
  /* [61][0][][] */ 18,-10,24,127,76,20,27,9,-92,4,16,40,-13,24,35,-52, 
  /* [62][0][][] */ -54,127,13,-53,-34,-12,-63,54,-28,-68,-81,-50,-14,-102,-52,-33, 
  /* [63][0][][] */ -49,21,-32,127,-89,8,-74,-38,-71,-32,-28,-37,22,66,48,49, 
  /* [64][0][][] */ 9,3,3,46,5,11,-13,68,29,6,-18,-44,-7,-127,47,-3, 
  /* [65][0][][] */ -17,-43,8,-127,44,-42,62,-36,-6,48,8,-116,-15,6,23,-52, 
  /* [66][0][][] */ 39,-9,68,-14,4,13,-11,103,16,-56,46,40,17,127,7,63, 
  /* [67][0][][] */ -1,49,-16,-127,-13,-9,-63,34,88,-98,-33,-9,24,86,83,31, 
  /* [68][0][][] */ -28,32,127,15,11,3,-9,1,-35,-15,-18,-33,18,-14,83,-35, 
  /* [69][0][][] */ 127,79,-22,-9,-93,-43,-25,-38,2,16,92,-62,-75,59,80,-103, 
  /* [70][0][][] */ 44,3,-49,-6,-22,27,49,127,-29,94,-32,5,14,67,-25,16, 
  /* [71][0][][] */ 11,0,-2,8,6,-79,1,21,-39,16,-81,3,-127,-5,39,53, 
  /* [72][0][][] */ 14,29,-127,12,22,21,31,99,-46,-23,13,-3,26,12,-9,6, 
  /* [73][0][][] */ -55,29,38,3,46,-42,-73,-127,18,-80,34,-22,7,-47,47,-18, 
  /* [74][0][][] */ -1,38,34,122,16,-9,-77,85,-76,11,-51,47,19,-127,38,-90, 
  /* [75][0][][] */ -14,38,-57,11,19,-1,23,-16,127,28,-17,-1,11,127,-53,-2, 
  /* [76][0][][] */ 4,-12,1,22,6,-10,-15,65,20,-26,-17,-127,-1,-3,4,14, 
  /* [77][0][][] */ -21,42,-24,127,-58,19,94,110,3,35,-13,36,-28,-26,-6,-8, 
  /* [78][0][][] */ -2,13,21,-127,45,-38,-27,29,14,-61,6,-43,14,114,26,56, 
  /* [79][0][][] */ -15,-87,-78,-62,-83,-2,22,-88,127,19,33,57,15,43,41,-51, 
  /* [80][0][][] */ -59,-7,112,-114,8,-56,29,-107,-83,37,-57,-127,17,97,108,-42, 
  /* [81][0][][] */ -47,49,-127,23,67,-119,-10,55,-9,-47,59,-2,24,-1,8,-1, 
  /* [82][0][][] */ 127,-13,-2,19,14,-117,-23,19,-14,-7,-100,-6,113,10,-5,25, 
  /* [83][0][][] */ -44,69,-119,-86,-40,-26,45,-126,66,45,-53,-127,9,52,61,102, 
  /* [84][0][][] */ -28,39,77,-31,7,-26,62,-127,-41,55,-9,-58,40,60,58,-5, 
  /* [85][0][][] */ -74,127,31,-117,-66,-25,-30,-7,-57,-3,-64,20,3,-13,-93,-27, 
  /* [86][0][][] */ -7,1,-29,6,-26,-35,127,23,6,-24,-2,7,5,37,92,-25, 
  /* [87][0][][] */ -20,-43,6,-114,11,-39,47,-19,-1,21,-8,-127,-14,7,8,-43, 
  /* [88][0][][] */ 89,-27,32,-21,16,-118,9,17,-65,26,-127,-58,30,21,83,6, 
  /* [89][0][][] */ 27,-16,-37,-48,29,-6,-26,-3,-46,11,38,-59,127,-5,21,-41, 
  /* [90][0][][] */ 0,-52,44,-60,70,1,-73,90,64,-84,-34,-20,-8,126,16,-127, 
  /* [91][0][][] */ -51,-4,-29,-43,12,-22,-24,-91,10,56,-13,-127,-41,-14,11,8, 
  /* [92][0][][] */ -20,19,43,19,3,-127,10,0,4,-20,3,-16,4,-21,17,3, 
  /* [93][0][][] */ 37,-18,127,-13,-53,56,26,-26,-22,25,-70,-16,-16,-1,31,6, 
  /* [94][0][][] */ 29,-2,-11,-19,25,-9,-18,-6,-28,-15,13,-56,127,-13,29,-31, 
  /* [95][0][][] */ 127,94,0,39,-94,-11,-65,-1,-22,-14,93,-41,-40,30,75,-77, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0008207550854422152, 0.0010951139265671372, 0.0007442778442054987, 0.00091431051259860396, 0.00083631172310560942, 0.001168018439784646, 0.00045205387868918478, 0.00092074228450655937, 0.00054091069614514709, 0.0010414373828098178, 0.00053892465075477958, 0.00067859765840694308, 0.00070351909380406141, 0.0031983351800590754, 0.00045917910756543279, 0.0005048336461186409, 0.00035972232581116259, 0.00071637390647083521, 0.0010668464237824082, 0.00058643403463065624, 0.00041305168997496367, 0.00025520799681544304, 0.00026673023239709437, 0.00023206877813208848, 0.00044405800872482359, 0.0018363307463005185, 0.0017512226477265358, 0.00087139796232804656, 0.000586908427067101, 0.0010942986700683832, 0.00061223574448376894, 0.00080242607509717345, 0.00064292416209354997, 0.00068393192486837506, 0.00088949262863025069, 0.00061820080736652017, 0.00044417113531380892, 0.00059962552040815353, 0.00094973412342369556, 0.00089743215357884765, 0.00041986256837844849, 0.0015483484603464603, 0.00085904204752296209, 0.00044407666428014636, 0.0011019435478374362, 0.00069253449328243732, 0.0007187268347479403, 0.00075395568273961544, 0.00088720594067126513, 0.00071223534177988768, 0.00057415716582909226, 0.00046230159932747483, 0.001190848764963448, 0.00063196965493261814, 0.00074595474870875478, 0.00082656502490863204, 0.0018610681872814894, 0.00074348493944853544, 0.00081124663120135665, 0.00038651391514576972, 0.0020106218289583921, 0.0011598452692851424, 0.00060225819470360875, 0.0012902556918561459, 0.0013030365807935596, 0.00080078031169250607, 0.00031390425283461809, 0.0005310762207955122, 0.0012418488040566444, 0.0011415883200243115, 0.00060709862736985087, 0.00064170599216595292, 0.0017360278870910406, 0.00079829595051705837, 0.00074506615055724978, 0.00041183392750099301, 0.00073510111542418599, 0.0001942376111401245, 0.00026873344904743135, 0.00052751239854842424, 0.00034783859155140817, 0.00041979851084761322, 0.00048138821148313582, 0.00049824611051008105, 0.00032993100467137992, 0.00078944343840703368, 0.0012635075254365802, 0.00057971314527094364, 0.00035709835356101394, 0.001328897662460804, 0.00071253429632633924, 0.00072769296821206808, 0.00078305811621248722, 0.0012893965467810631, 0.00093198567628860474, 0.00059526372933760285, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -8561, 18464, -22380, -1369, -10546, 9502, 30148, -53818, -2222, 17593, 26492, 15733, -12704, 12380, -4644, 11145, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00086309155449271202, 0.00036542455200105906, 0.0002353886520722881, 0.00022388412617146969, 0.0004365280328784138, 0.00034466187935322523, 0.0003623638185672462, 0.0002661942271515727, 0.00034308779868297279, 0.0003056235727854073, 0.00068617821671068668, 0.00058932730462402105, 0.00038951312308199704, 0.00021944024774711579, 0.0005809646681882441, 0.00049203925300389528, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -16,-10,-1,-27,12,-2,-41,-3,17,-3,-8,4,-10,-7,-24,6,1,8,-7,-1,9,-29,4,5,4,9,3,127,33,-29,40,-6,1,8,3,5,-11,10,-31,-2,-5,7,3,31,2,13,15,12,23,4,-9,11,19,-15,-10,75,1,8,-25,-34,-7,22,0,-26,-43,-63,-15,34,7,13,16,-18,-9,-34,-1,-18,-29,18,3,5,-4,-25,24,23,-5,-6,-10,-91,3,-15,8,-1,41,-30,-34,-9, 
  /* [1][0][][] */ 40,-70,-79,-62,127,-10,59,41,-30,-89,-54,-20,-1,-10,-62,48,-74,13,40,45,11,35,-9,-67,18,-6,-17,-81,44,-13,-55,40,-16,36,3,-1,3,-10,4,22,-37,43,-48,-19,-47,85,4,-5,27,-74,6,-44,-13,38,56,5,-64,-32,-27,-42,24,-25,7,-48,-92,104,-27,-19,-1,-27,-25,19,50,-104,-31,10,32,-49,42,2,0,-22,23,7,-46,38,-24,26,31,-42,-3,16,26,8,38,107, 
  /* [2][0][][] */ -3,56,-82,4,99,83,32,84,9,-110,5,-9,-3,3,34,14,17,-23,-41,74,34,-1,75,36,42,26,3,-39,27,-11,48,-68,24,40,-23,42,-127,-83,42,19,10,-54,8,-20,29,-24,-4,83,-22,22,-19,-12,87,-6,-16,64,39,19,19,8,19,29,29,-24,24,1,-33,-9,-47,12,-9,-34,-38,-80,7,69,80,50,41,-19,28,-54,21,-15,-48,23,27,35,-12,23,11,-35,3,-26,-58,-3, 
  /* [3][0][][] */ 58,14,95,-8,56,-38,19,-10,-8,-67,12,-40,0,35,32,99,21,-10,35,9,127,-6,36,28,46,-17,-16,20,27,42,-15,89,-107,23,31,-6,-14,-21,1,38,-75,-38,69,8,28,51,-50,-88,-61,-39,-54,44,0,-127,-5,30,-107,73,53,43,15,100,-20,-48,37,71,0,-54,29,-23,4,-62,52,-34,52,-13,16,-9,49,38,-34,-79,21,-19,-36,8,30,37,24,9,17,31,30,113,37,-31, 
  /* [4][0][][] */ 19,0,13,-10,127,37,-13,-25,-35,-48,-33,-25,-49,27,-13,52,30,-80,-35,77,-23,13,22,-13,2,-13,9,-31,11,-3,48,-26,89,12,-25,15,39,16,16,14,-21,-13,-30,-31,-10,-51,-10,14,41,8,-25,16,1,-31,15,-27,19,-12,-26,25,-4,50,61,23,32,43,-16,-2,-39,4,37,54,10,-72,-33,-17,22,30,81,-33,-3,-31,8,-11,-71,10,34,50,-42,34,2,-35,3,13,25,-14, 
  /* [5][0][][] */ 4,-7,-22,22,29,-18,43,-34,-16,-48,-14,14,1,34,-6,9,0,-8,25,-12,42,21,-50,77,13,-13,17,-97,-7,34,6,37,-4,5,5,-57,32,24,3,10,-1,-16,23,-29,-9,5,8,-14,-8,-21,11,-10,1,-31,-2,-50,-9,21,-21,16,64,19,-4,41,-9,54,9,75,13,102,20,29,6,9,-3,75,-35,-13,23,5,-5,-9,10,15,-17,14,-11,127,9,31,-3,-13,-6,17,-58,25, 
  /* [6][0][][] */ 25,-76,13,-32,-39,18,29,16,5,-7,-6,-68,-37,-1,-31,29,25,-2,-3,-11,-51,44,14,6,-18,-4,-22,-8,-15,24,40,3,68,14,59,-1,-12,-16,26,-100,-16,95,6,-39,8,-30,-22,20,-3,44,-34,78,-14,-60,-7,-17,-2,-66,-2,-4,-16,54,47,-82,25,-34,14,-26,-1,6,127,-3,-49,5,-29,37,-95,-2,14,3,35,53,25,-2,-23,1,36,31,20,5,55,-32,-20,-10,-33,-9, 
  /* [7][0][][] */ 7,121,51,8,127,41,51,-28,-29,-28,32,-15,-19,28,17,24,6,-46,12,34,41,-35,41,14,-9,18,17,2,17,-28,10,14,40,-8,-38,6,27,13,-18,77,-54,26,11,26,-4,-20,22,-34,-34,-34,35,2,16,-47,-38,56,52,4,-25,1,-8,-39,-10,-2,-48,75,-42,-92,-14,-43,0,72,-10,-24,11,8,64,54,45,-19,-54,-42,-11,-13,-19,48,-2,-9,-37,29,-41,-42,-44,-14,21,-10, 
  /* [8][0][][] */ -7,5,44,25,-127,-19,39,-22,33,73,67,12,-16,14,27,10,-37,16,6,-3,-37,-1,-112,69,15,-38,60,-4,7,24,-3,54,75,-15,-8,-2,-29,-17,13,40,20,-31,47,2,-48,-8,48,14,-101,16,21,29,-56,-28,-32,37,11,-46,-80,-19,14,-34,-28,-6,3,70,6,-49,24,-12,-46,-28,35,45,58,-7,-26,-41,-15,23,-76,13,-11,-3,22,22,57,44,29,-36,51,51,-3,-4,39,22, 
  /* [9][0][][] */ 4,-104,-28,30,92,86,-40,-38,36,-48,95,96,-30,19,90,-100,14,-25,-11,11,-61,-41,23,-1,-22,0,-6,41,-24,16,-1,-3,29,21,-122,42,-8,8,-4,71,44,-85,-12,56,-9,-22,-71,-19,40,31,-20,-79,60,40,-9,-60,-12,94,-9,1,21,-62,-40,127,-100,-20,6,-26,-2,31,-65,-91,39,-12,10,28,56,-74,34,12,0,-20,12,22,-10,-62,17,1,14,-39,-48,44,-75,-14,-10,-37, 
  /* [10][0][][] */ -45,-20,-36,-43,-30,-3,60,-26,37,12,31,34,20,-12,-5,-2,-10,25,-31,-16,-4,34,18,18,-16,-12,10,-127,25,-40,56,-30,-2,19,-7,-8,-4,33,8,-5,15,-33,28,-54,6,-5,26,20,-7,40,-30,-16,-38,-22,-10,-61,14,12,-5,-42,23,8,-6,7,-40,88,-9,-31,11,-27,-1,-19,-31,-9,22,57,-12,40,-18,13,-17,-4,6,28,7,-14,-11,115,-2,-6,16,16,19,-39,48,-36, 
  /* [11][0][][] */ -88,18,1,0,26,-68,-12,-1,-52,-4,-7,17,31,26,-30,-8,50,-3,-59,-51,27,-6,-13,4,77,5,69,-3,-26,26,-47,17,-13,21,-7,-7,-5,7,21,7,-21,-12,-2,3,89,22,76,17,48,38,-2,34,6,-68,28,1,-68,-16,-42,-45,-4,-8,-5,22,0,-26,27,-3,21,6,0,35,-21,13,25,0,-16,82,-127,68,-45,-9,-66,-74,124,16,45,-15,13,45,-34,-65,-25,50,-28,-5, 
  /* [12][0][][] */ -10,-5,-41,3,68,20,0,-19,-9,17,23,1,10,-10,30,-14,-28,-14,13,-19,2,-15,-45,55,-19,38,-21,108,-19,30,-42,4,-12,27,9,28,-16,-16,22,4,3,-21,1,0,-15,2,28,31,1,-6,-2,-26,-17,16,-9,-15,-12,-2,16,22,-20,-18,-7,46,38,-76,15,51,-27,-127,-1,51,3,6,11,83,2,-16,1,-1,3,23,-35,-2,2,-16,2,-46,-2,16,9,1,-44,35,-14,28, 
  /* [13][0][][] */ -79,67,-11,4,-67,14,-13,9,-29,-36,49,27,76,11,-18,2,-12,40,-45,-15,21,-11,49,-45,60,37,4,8,15,-22,-34,-94,-99,-35,2,12,-7,24,46,-10,-25,86,11,10,33,8,-3,17,71,-2,35,82,62,-59,75,-19,-28,57,41,7,11,34,-19,21,-3,-25,16,11,12,25,22,-127,5,-31,-74,5,44,44,-56,-43,95,-20,6,-24,37,-26,85,11,-19,-3,-11,28,29,-42,-19,15, 
  /* [14][0][][] */ -26,17,-9,-54,26,1,-14,33,-91,2,21,7,-30,-61,-72,-22,-87,-7,62,9,24,-9,15,-109,-33,24,-55,-25,21,-19,1,-31,-61,-29,23,14,-19,-3,2,0,0,85,-64,-8,-53,17,7,4,127,-26,23,-14,33,56,-99,13,-25,22,-97,9,8,25,45,23,3,29,-4,5,-46,19,57,30,34,-6,-24,18,55,-67,-35,-86,16,-30,7,45,38,-65,-45,12,-42,21,31,52,15,33,21,-19, 
  /* [15][0][][] */ -37,-76,-4,-41,7,8,-1,-58,-24,20,-9,-31,45,-16,48,-21,-91,-6,-15,15,-10,2,-60,-39,-14,1,-1,12,-23,-19,63,-92,-11,26,25,6,-4,24,-96,2,25,-64,-5,30,-19,-42,49,26,44,15,-7,-127,-8,42,-6,41,37,-7,-23,41,5,5,36,0,6,-7,-13,-5,-24,16,10,39,-37,10,-4,-37,-26,-13,6,5,-8,35,-8,67,-15,-44,-32,-35,-45,62,25,72,-31,-6,3,-16, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.036681391298770905, 0.015530543401837349, 0.010004017502069473, 0.0095150750130414963, 0.018552441149950027, 0.014648129232227802, 0.015400461852550507, 0.01131325401365757, 0.014581231400370598, 0.012989001348614693, 0.02916257455945015, 0.025046410039067268, 0.016554307192564011, 0.0093262102454900742, 0.02469099685549736, 0.020911667495965958, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 16079, 61757, -1058, -265, 13388, -5848, 987, -127, 5094, 10042, -4756, -203, 327, 4787, 4833, -9312, -3981, -184, -474, 16910, -10989, 13250, -2822, 11532, 25369, -7, -5434, 17548, 14292, -19029, 1214, 21484, 23664, -11152, 1607, 395, 212, -1093, 4657, -6146, -5093, -172, -7153, 40, 30097, -1407, 12445, -1077, -14101, 1291, -11, -66, -1884, 16131, -3017, 15746, 21017, -141, 33432, -114, -9111, -1038, 1316, -165, -1817, 14370, -1182, -5520, -3729, 2610, 66, -5004, 1056, -34, -1537, -4569, -318, -1723, 44372, -6198, -5395, -11423, -365, 381, 55015, -14288, -9531, -27456, -8957, 10062, -1820, 37299, 229, -2032, -3214, 870, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00014724006177857518, 9.1832043835893273e-05, 0.00011863920371979475, 0.00022672952036373317, 0.00025669424212537706, 0.00013976496120449156, 4.4763608457287773e-05, 9.5543960924260318e-05, 0.00027269814745523036, 0.00024236607714556158, 0.00023441428493242711, 0.00011991297651547939, 0.0002878501545637846, 0.00021106842905282974, 0.0004561000969260931, 0.00015678282943554223, 0.00020529566972982138, 0.0002155378315364942, 0.00018726740381680429, 6.5722451836336404e-05, 6.3985520682763308e-05, 3.9327620470430702e-05, 0.00014084340364206582, 6.8483197537716478e-05, 9.3175491201691329e-05, 0.00011549205373739824, 0.00017746372031979263, 0.00017616747936699539, 7.3429924668744206e-05, 0.00045673779095523059, 0.00038795993896201253, 0.00024415264488197863, 0.00012062664609402418, 0.00014125235611572862, 0.00027742242673411965, 0.00043531437404453754, 0.00038980992394499481, 0.00016847846563905478, 0.00028620089869946241, 0.00012744261766783893, 0.00024301228404510766, 0.00026999731198884547, 0.00035139766987413168, 7.7987133408896625e-05, 0.00038183445576578379, 8.8577624410390854e-05, 0.00011935788643313572, 0.00035071151796728373, 0.00072787806857377291, 0.00014448280853684992, 0.0004416867159307003, 0.00018645073578227311, 0.00027622398920357227, 0.00017171676154248416, 0.00027395869255997241, 0.00011366671969881281, 0.00012996388250030577, 0.00050328188808634877, 4.8098067054525018e-05, 0.00017610342183616012, 0.00029337478918023407, 0.00038089515874162316, 0.0001173063283204101, 0.00016197618970181793, 0.00015360476390924305, 0.00012779662210959941, 0.00028437556466087699, 0.00038931341259740293, 0.00018712690507527441, 0.0001471593277528882, 0.00028770117205567658, 0.0001066285913111642, 0.000269745709374547, 0.0001510261936346069, 0.0004695280222222209, 0.00040648487629368901, 0.00014742313942406327, 9.0177694801241159e-05, 5.7656390708871186e-05, 0.00020990875782445073, 0.00022274597722571343, 0.00024271327129099518, 0.00016190757742151618, 0.00033408615854568779, 6.4976149587891996e-05, 0.00010837245645234361, 8.0734513176139444e-05, 0.00052409217460080981, 0.000213771709240973, 0.00014006152923684567, 0.00037817301927134395, 2.6116731532965787e-05, 0.00018784373241942376, 0.00010579001536825672, 0.00029652411467395723, 0.00029109482420608401, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-72,-10,127,22,71,77,-58,-14,-18,-15,-6,-29,1,37,1,-8,-45,26,22,17,-127,127,6,-84,7,49,-29,-125,-127,40,24,12,27,61,-18,-30,-10,30,-8,-13,27,-109,71,26,-68,38,46,-18,51,-25,19,2,-6,16,49,-89,-49,-60,-18,-11,1,11,37,68,-25,74,13,-9,16,19,127,23,23,25,-1,-10,18,127,-6,-15,14,-28,20,125,22,-77,-16,0,-31,-16,-37,1,-26,-15,25, 127,-127,75,105,-43,127,37,-118,70,4,-17,127,127,-99,-13,14,12,127,127,-111,127,-77,80,69,-127,-116,-66,-34,-55,45,-59,-21,-89,54,-127,-84,-43,-15,-54,62,0,127,127,81,-51,-113,-111,-50,-15,-127,43,84,67,-32,45,83,-46,42,-78,-112,-44,-41,-61,67,72,-61,26,31,-80,33,-17,91,118,127,13,19,2,59,-33,51,65,127,127,-23,-9,76,-112,127,-119,-100,4,-127,-90,-127,-37,104, -75,-12,30,-82,15,-24,66,-8,81,-35,-28,17,-19,-4,-9,-14,-8,-17,7,-3,-24,-103,29,-1,-122,97,8,-55,117,49,-14,9,1,15,15,-30,-9,33,18,11,25,11,-121,63,18,-18,37,13,-14,11,-17,5,-11,2,-3,22,-65,6,-33,52,3,41,33,-2,-7,-38,-31,24,9,2,-4,36,9,-25,-5,4,-11,-6,-85,1,-22,-24,-18,3,-109,11,-34,-22,-50,25,-26,-31,29,-26,-13,0, 
  /* [0][1][][] */ -64,-74,73,-35,-47,94,19,127,-51,-21,0,-119,26,-114,78,31,-3,-61,-17,89,55,-72,47,50,-92,-12,127,-23,-24,63,122,-103,-127,90,-86,-57,-36,31,-29,93,-49,-26,-4,47,-47,127,-23,65,16,95,19,-2,14,-54,27,33,127,122,-71,-85,127,-32,-35,127,72,-38,-15,-2,127,39,127,97,-41,102,-5,12,14,13,-31,9,-44,124,-81,110,0,34,-57,31,79,-127,-32,-5,127,-69,-22,0, 68,126,56,-115,127,82,88,38,-127,127,127,-39,-64,-127,-127,127,127,-65,-124,-50,105,93,-123,127,-106,-91,-43,127,-127,109,-127,-127,-89,127,107,127,127,-127,-106,127,-66,-95,111,-127,-127,-36,-127,-127,127,-112,86,43,127,127,127,-127,100,-127,-127,127,20,-78,-127,-100,-127,127,-127,127,-124,-127,-106,-81,-127,-78,127,127,-127,127,-77,127,127,30,-42,-127,59,127,92,46,127,12,127,4,-67,35,127,-127, -53,-13,-49,38,-56,-97,35,-27,19,-34,-29,93,2,95,14,10,-4,64,-7,127,3,-88,-42,8,-73,105,-71,-20,-70,-16,16,-62,-70,37,6,-18,-29,45,-68,40,127,-5,-40,28,-40,-60,16,45,9,117,-12,6,-38,-72,3,19,95,3,0,22,-34,127,92,-52,-43,12,38,-11,-77,123,-18,-84,0,-53,-17,-21,27,16,77,-37,-71,-42,56,15,-48,-16,71,23,16,62,-44,22,-42,96,-26,-5, 
  /* [0][2][][] */ -67,2,-4,-20,13,-44,66,24,56,-28,-36,-3,19,19,-26,1,-8,65,7,1,-54,-82,2,-8,-25,-54,35,-69,90,38,26,27,16,-9,-10,-47,-7,35,-4,-2,-16,-7,-68,105,4,31,12,37,-15,-31,10,-20,22,-1,9,15,-70,25,-15,14,14,1,-20,-5,0,-47,-47,14,-33,13,26,30,13,-19,27,4,17,4,-78,-12,-9,-9,16,14,-127,8,12,-43,-57,-50,-27,-50,9,57,-19,-8, 122,34,-127,-36,-71,-25,39,29,-64,-29,-19,-109,-75,112,-13,37,1,-51,-10,-125,91,-53,-39,1,-104,127,-51,20,-34,-22,-9,-5,-61,16,28,5,-23,-29,127,51,11,-14,69,-34,-39,77,-67,-43,-33,-6,-127,-127,-51,-26,1,39,-64,-6,12,39,-8,-17,9,-48,-54,32,64,-23,113,109,-24,-69,12,-57,4,4,99,3,51,21,11,-99,-51,2,2,9,127,40,-60,38,-19,-114,41,78,-10,25, -53,13,-18,26,16,-68,-127,2,-11,-8,-16,4,16,-24,19,-2,-8,-16,4,17,-48,-73,14,1,18,-95,20,3,-48,-40,-7,16,42,-20,-5,-25,-36,3,41,-41,23,-3,-50,-34,3,66,23,16,-9,-5,10,-9,17,6,-4,-5,-60,-12,2,-38,-12,11,85,-11,35,-2,-2,27,0,5,-5,21,-17,17,1,15,36,0,75,-13,2,-9,-8,-17,73,1,42,-38,59,39,-17,-55,-8,2,-15,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0062577025964856148, 0.0039028618484735489, 0.0050421659834682941, 0.0096360044553875923, 0.010909505188465118, 0.0059400107711553574, 0.0019024533685296774, 0.0040606181137263775, 0.011589670553803444, 0.010300558060407639, 0.0099626071751117706, 0.0050963014364242554, 0.012233630754053593, 0.0089704077690839767, 0.019384253770112991, 0.006663269829005003, 0.0087250657379627228, 0.0091603575274348259, 0.0079588647931814194, 0.0027932040393352509, 0.0027193846181035042, 0.0016714239027351141, 0.0059858444146811962, 0.0029105357825756073, 0.0039599584415555, 0.004908412229269743, 0.0075422078371047974, 0.0074871177785098553, 0.0031207716092467308, 0.019411355257034302, 0.016488296911120415, 0.010376486927270889, 0.005126632284373045, 0.0060032247565686703, 0.011790452525019646, 0.018500860780477524, 0.016566921025514603, 0.0071603343822062016, 0.012163538485765457, 0.0054163108579814434, 0.010328021831810474, 0.011474885046482086, 0.014934401027858257, 0.0033144531771540642, 0.01622796431183815, 0.0037645490374416113, 0.0050727101042866707, 0.014905239455401897, 0.030934818089008331, 0.0061405193991959095, 0.018771685659885406, 0.0079241562634706497, 0.0117395194247365, 0.0072979619726538658, 0.011643243953585625, 0.0048308353871107101, 0.0055234646424651146, 0.02138948068022728, 0.002044167835265398, 0.0074843950569629669, 0.01246842835098505, 0.016188044100999832, 0.004985518753528595, 0.006883988156914711, 0.0065282024443149567, 0.0054313563741743565, 0.012085961177945137, 0.016545819118618965, 0.0079528931528329849, 0.0062542716041207314, 0.012227299623191357, 0.00453171506524086, 0.011464192532002926, 0.006418613251298666, 0.019954940304160118, 0.017275607213377953, 0.0062654833309352398, 0.003832551883533597, 0.0024503965396434069, 0.0089211221784353256, 0.0094667039811611176, 0.010315313935279846, 0.0068810717202723026, 0.014198661781847477, 0.0027614862192422152, 0.0046058292500674725, 0.0034312168136239052, 0.022273916751146317, 0.0090852975845336914, 0.0059526148252189159, 0.016072353348135948, 0.0011099610710516572, 0.0079833585768938065, 0.0044960756786167622, 0.012602274306118488, 0.012371529825031757, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 2080, 6318, 12943, 32145, 14235, -2602, -2338, 6017, 28218, -4214, 10835, 6315, 9575, 10943, 32515, 1429, 2320, 8910, 15742, 6263, -286, 413, 13634, -1194, 5362, 59, 12978, 6658, 6749, 38166, 51463, 17713, 8161, -707, 10935, 2578, 1667, 4429, 17851, -821, 14651, 10031, 34146, -3892, 25752, 9890, 5737, 19754, 67696, 11075, -517, 10525, -3637, -239, -2914, 7521, -520, 19710, 5987, 9072, 6276, 18612, 7807, 8254, 12130, 7944, 4833, -6342, 6143, -3661, 5740, 10577, 22020, 6689, -3764, -6640, 7787, 306, 2527, -1016, 16371, 13299, 7120, 17119, 3508, 414, 12025, 60852, 11140, 12303, 5791, -297, 7605, 8081, 5256, 14827, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00019015994621440768, 0.00023583159781992435, 0.00014582234143745154, 7.1832255343906581e-05, 0.00020889793813694268, 0.00038653239607810974, 0.00034740913542918861, 0.00027061361470259726, 8.2221282355021685e-05, 0.00032712396932765841, 0.00024872651556506753, 0.00014083158748690039, 0.00013219341053627431, 0.00021190497500356287, 7.3301431257277727e-05, 0.00041058257920667529, 0.00019288806652184576, 0.00014138322148937732, 0.00014185713371261954, 0.00018856542010325938, 0.00029510597232729197, 0.00056169205345213413, 0.00014766142703592777, 0.00053484831005334854, 0.00048434187192469835, 0.00023590678756590933, 0.00017198749992530793, 0.00020578272233251482, 0.00024066843616310507, 9.2565060185734183e-05, 5.5456483096349984e-05, 0.00013792174286209047, 0.00020379111811053008, 0.00032335828291252255, 0.00018334791820961982, 0.00022791652008891106, 0.00031868176301941276, 0.00033432914642617106, 0.00015174236614257097, 0.00067523488542065024, 0.00012857845285907388, 0.00015633470320608467, 7.8751079854555428e-05, 0.00026861639344133437, 0.0001257470139535144, 0.00015539285959675908, 0.00030149679514579475, 0.00013583076361101121, 6.1029233620502055e-05, 0.0001907970872707665, 0.00025327238836325705, 0.00016380596207454801, 0.00029094115598127246, 0.00021432124776765704, 0.00035413404111750424, 0.0001480849168729037, 0.00019532110309228301, 9.4696071755606681e-05, 0.00034057875745929778, 0.00016298081027343869, 0.00025814323453232646, 7.5972631748300046e-05, 0.00018721459491644055, 0.00012150331895099953, 0.00020300335017964244, 0.00024332788598258048, 0.00026470443117432296, 0.00020818665507249534, 0.00027302157832309604, 0.00019595022604335099, 0.00019323320884723216, 0.00014815109898336232, 9.5171722932718694e-05, 0.00015533529222011566, 0.00041193043580278754, 0.00020473804033827037, 0.00021215998276602477, 0.0002904401917476207, 0.00030330449226312339, 0.00036753516178578138, 0.00012546646757982671, 0.00012680537474807352, 0.00012459098070394248, 0.00011224135960219428, 0.00032801638008095324, 0.00024778622901067138, 0.00019542653171811253, 6.3057683291845024e-05, 0.00012643945228774101, 0.00018420370179228485, 0.0002205897617386654, 0.00032643365557305515, 0.00019208026060368866, 0.00019901739142369479, 0.00021302816458046436, 0.0001146635549957864, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 0,72,-21,82,31,32,12,-5,38,35,-61,111,9,-127,35,-126, 
  /* [1][0][][] */ 25,44,-7,-24,31,-34,127,-98,-4,86,-19,-12,-2,-45,25,19, 
  /* [2][0][][] */ -127,43,-28,-25,2,2,49,80,-26,52,112,-15,-52,15,37,-44, 
  /* [3][0][][] */ -98,69,64,55,-72,75,74,126,11,63,-127,3,59,-99,-91,-63, 
  /* [4][0][][] */ 15,-3,28,62,-12,56,0,39,2,-11,-2,-5,21,-3,-127,-17, 
  /* [5][0][][] */ -8,-27,49,-22,6,-22,-6,25,-71,95,-27,-127,-16,20,-56,-20, 
  /* [6][0][][] */ 9,4,26,-16,33,51,-58,-73,-15,3,42,-21,127,-30,-10,-29, 
  /* [7][0][][] */ 20,14,127,-11,-24,-38,10,-8,-74,28,-78,-48,15,-9,39,-19, 
  /* [8][0][][] */ 17,31,80,59,-52,80,32,52,33,0,4,-84,-40,2,-127,-69, 
  /* [9][0][][] */ 28,-101,48,45,11,-21,6,22,127,9,85,18,-18,15,-92,-34, 
  /* [10][0][][] */ -33,-99,8,-30,-95,14,-16,49,106,127,66,-22,-15,58,99,6, 
  /* [11][0][][] */ 42,-19,17,-99,17,-28,-111,-127,-63,32,-17,-27,29,-24,32,-63, 
  /* [12][0][][] */ -20,3,3,-40,-46,-27,-87,-11,-39,-72,-14,17,27,127,100,44, 
  /* [13][0][][] */ -21,-114,-54,48,11,-49,10,-10,70,27,-15,-2,28,35,127,26, 
  /* [14][0][][] */ -11,-52,46,38,22,22,18,127,29,53,2,-30,13,51,-49,100, 
  /* [15][0][][] */ 22,-35,0,58,13,-2,98,3,2,-127,18,-35,3,-23,-6,-34, 
  /* [16][0][][] */ 51,-65,-64,21,-4,-12,31,-81,115,59,88,-5,-5,96,68,127, 
  /* [17][0][][] */ -88,-80,32,127,103,35,20,-5,120,-42,-18,-33,0,54,-102,39, 
  /* [18][0][][] */ -8,6,-1,12,-103,-1,-9,30,-72,-27,-23,-43,-3,-127,59,6, 
  /* [19][0][][] */ 51,-63,59,-70,108,46,-110,106,109,-81,83,60,-24,75,48,127, 
  /* [20][0][][] */ 34,-14,57,-64,-14,15,-25,52,-21,-50,88,-20,3,7,-43,127, 
  /* [21][0][][] */ -68,-11,3,-33,19,14,-85,-53,-20,52,-1,9,-127,-11,30,-6, 
  /* [22][0][][] */ 25,-24,23,-24,16,-69,8,-19,-127,31,-14,-45,-21,-18,79,-25, 
  /* [23][0][][] */ 12,10,10,-14,-3,3,-11,-1,-12,-8,44,-17,127,-10,5,-30, 
  /* [24][0][][] */ -5,-5,10,-74,-26,-13,55,10,-51,7,-2,-127,13,-116,52,8, 
  /* [25][0][][] */ -102,-2,-40,-2,58,-34,-72,-127,-17,57,-32,-49,-71,-65,11,-49, 
  /* [26][0][][] */ 31,-2,40,-103,110,-34,-2,-4,127,-52,38,-30,-8,103,4,78, 
  /* [27][0][][] */ 95,-33,19,-32,-37,-50,-8,-24,-26,18,-127,12,19,-21,3,38, 
  /* [28][0][][] */ -121,-16,-127,-81,63,-6,74,-59,15,54,-70,15,46,-7,-50,54, 
  /* [29][0][][] */ -55,-20,-1,127,-9,26,10,-36,-6,9,-66,46,23,-68,19,-41, 
  /* [30][0][][] */ 49,-14,127,-17,65,47,-23,88,-35,-71,72,-29,-19,31,-76,68, 
  /* [31][0][][] */ 11,-94,4,-49,0,-61,14,-44,-14,37,103,14,-20,95,70,127, 
  /* [32][0][][] */ -14,75,-36,35,-127,22,-71,-44,-58,-40,-3,47,7,49,40,64, 
  /* [33][0][][] */ 32,-10,24,127,16,0,26,-38,-97,55,66,-21,10,6,5,98, 
  /* [34][0][][] */ 32,8,15,-8,82,-36,-127,-20,-46,88,-39,-6,-25,5,12,-9, 
  /* [35][0][][] */ 75,15,-7,-6,19,-127,-24,-8,-30,-6,-92,-6,84,21,-4,24, 
  /* [36][0][][] */ 25,-3,-127,11,42,7,-35,17,-26,-15,-3,-15,6,10,-13,9, 
  /* [37][0][][] */ -4,6,127,-12,-57,29,28,-54,-16,33,-44,24,14,-10,18,2, 
  /* [38][0][][] */ -125,22,-5,22,24,72,5,-22,10,-29,127,-34,-22,11,-6,-17, 
  /* [39][0][][] */ -15,-7,19,33,33,-10,-127,38,13,26,0,-33,2,-21,-4,-3, 
  /* [40][0][][] */ 1,71,-18,127,14,46,52,31,-67,-36,-31,58,15,41,-74,-25, 
  /* [41][0][][] */ 17,2,-47,-21,-42,-6,127,90,-52,85,-35,3,-6,65,30,0, 
  /* [42][0][][] */ 4,-34,-44,-29,3,13,-38,86,74,-105,127,56,-17,25,-40,50, 
  /* [43][0][][] */ -84,-2,32,-43,36,20,-79,-75,-29,39,5,-13,-127,-15,36,-7, 
  /* [44][0][][] */ 1,4,-12,-2,1,-26,-4,-42,127,-1,13,46,9,78,-2,39, 
  /* [45][0][][] */ -69,-82,21,-91,47,-8,-10,57,19,-75,-20,-27,40,127,-44,123, 
  /* [46][0][][] */ -41,13,-25,101,-78,-30,1,-73,-127,46,-50,-8,1,38,4,-46, 
  /* [47][0][][] */ -30,-20,-104,127,10,60,1,-22,15,59,59,61,-28,-10,21,-23, 
  /* [48][0][][] */ -13,8,32,-127,21,-29,-14,-6,-53,6,22,-19,-15,64,98,36, 
  /* [49][0][][] */ -40,24,33,127,-24,35,-43,-7,32,-48,-109,-37,-18,-34,-98,-123, 
  /* [50][0][][] */ -6,63,25,-106,59,18,-13,60,127,-23,-34,11,-5,-40,21,-29, 
  /* [51][0][][] */ 10,-32,20,-8,42,-14,-53,-127,9,-71,-8,1,-13,-13,-10,-12, 
  /* [52][0][][] */ 31,27,0,31,50,-11,-80,106,-97,127,-52,-40,101,103,5,-53, 
  /* [53][0][][] */ -21,113,-2,-101,-50,-8,43,-12,-54,-60,-57,58,20,-127,-83,-20, 
  /* [54][0][][] */ 2,7,11,35,45,-29,5,-40,-3,34,-11,-19,-10,127,-46,-12, 
  /* [55][0][][] */ -121,127,86,-18,46,-4,-23,-13,-55,37,112,-17,-16,-33,125,-7, 
  /* [56][0][][] */ 65,-1,22,-124,95,-11,-17,33,57,-56,52,127,-29,12,97,68, 
  /* [57][0][][] */ -38,-1,6,72,-18,17,49,127,3,16,9,-29,3,69,7,12, 
  /* [58][0][][] */ 12,119,-5,-127,2,28,-12,15,96,-15,-9,77,-1,-95,48,67, 
  /* [59][0][][] */ 33,61,46,-109,-42,-4,32,-5,10,36,25,-72,-24,-127,-80,25, 
  /* [60][0][][] */ 45,-6,108,-37,-31,127,29,-31,-7,43,-43,-5,34,15,30,-11, 
  /* [61][0][][] */ -15,31,-36,-40,-47,7,98,127,-9,76,-4,18,3,78,23,-29, 
  /* [62][0][][] */ -8,-7,-2,-5,-65,37,-60,-1,-18,-18,0,-52,13,-127,75,1, 
  /* [63][0][][] */ 10,-30,4,-98,46,4,-121,-127,-63,91,-24,17,61,7,16,-48, 
  /* [64][0][][] */ -26,-1,33,48,65,-11,-42,-127,33,-107,5,-40,1,-18,0,1, 
  /* [65][0][][] */ -127,16,29,-56,18,74,51,-44,-76,29,48,-10,-2,23,-20,-31, 
  /* [66][0][][] */ 75,15,101,19,-50,20,-34,50,-48,-3,67,-88,-10,58,-127,-28, 
  /* [67][0][][] */ 42,-37,-30,69,65,-40,-81,-101,52,-127,-67,-33,-86,10,-91,9, 
  /* [68][0][][] */ 2,-21,-61,65,-55,-68,19,-31,-35,-19,38,-65,-38,57,127,-15, 
  /* [69][0][][] */ -25,39,-70,64,-6,-127,28,87,32,12,61,-12,126,37,-15,-2, 
  /* [70][0][][] */ 24,10,-34,-34,-40,6,127,93,-22,55,-19,12,12,45,8,-4, 
  /* [71][0][][] */ 7,-4,-31,-49,17,9,9,46,-21,-40,-8,-7,21,-127,82,4, 
  /* [72][0][][] */ 39,33,-5,27,42,-47,-49,-127,10,54,-58,21,40,52,32,59, 
  /* [73][0][][] */ -56,-127,-22,-67,-91,-11,37,-30,-14,11,-26,-33,25,-46,73,-12, 
  /* [74][0][][] */ -33,37,54,92,-16,-8,-127,94,21,-42,-37,-42,-13,-6,-13,11, 
  /* [75][0][][] */ -55,31,-33,18,-26,89,85,127,1,57,2,-29,-114,78,17,21, 
  /* [76][0][][] */ 20,-23,-30,-11,49,-66,-127,-115,-10,-5,5,-11,41,-2,61,-42, 
  /* [77][0][][] */ -28,14,-31,-22,-46,3,-16,-47,127,12,-56,5,-1,41,30,-82, 
  /* [78][0][][] */ -108,-127,-12,87,72,63,-32,29,-8,-72,-113,88,50,-33,101,59, 
  /* [79][0][][] */ 32,-13,24,-59,127,-5,44,7,74,23,-4,31,-8,-30,13,-40, 
  /* [80][0][][] */ -12,-24,60,-95,-12,-34,9,14,-61,-25,-11,-36,0,127,-24,16, 
  /* [81][0][][] */ 23,3,41,46,0,59,-11,-15,16,-1,-9,-32,-3,42,-127,13, 
  /* [82][0][][] */ -73,-9,31,-127,-15,-41,-6,-55,-28,-30,-56,-119,-17,-102,-90,17, 
  /* [83][0][][] */ 6,8,-20,-61,-35,17,-7,35,-77,1,19,-79,26,-127,1,56, 
  /* [84][0][][] */ 127,30,28,48,-50,2,-63,21,-10,-26,100,6,-75,20,77,-80, 
  /* [85][0][][] */ 2,-27,27,-24,50,4,-46,122,-75,-107,-60,-28,-12,89,80,-127, 
  /* [86][0][][] */ 7,7,-4,2,-63,60,-28,47,-84,-40,37,-19,-18,-127,-3,31, 
  /* [87][0][][] */ 127,-44,10,0,-52,-44,11,0,2,22,-127,8,31,-14,-5,36, 
  /* [88][0][][] */ 28,68,-33,9,-19,-35,-5,-10,102,31,34,47,-24,-28,127,-114, 
  /* [89][0][][] */ 46,66,-83,-15,-36,-32,31,-62,45,52,17,-28,-49,4,-25,-127, 
  /* [90][0][][] */ -20,-25,9,-70,-79,16,127,-62,97,-70,9,-75,48,-15,-27,-16, 
  /* [91][0][][] */ 19,13,-13,-98,-42,7,25,-30,-41,23,70,44,20,-16,36,127, 
  /* [92][0][][] */ 15,1,14,16,61,-8,-76,-127,42,-61,3,-28,-38,-17,0,-23, 
  /* [93][0][][] */ 70,0,30,-127,-42,-1,-24,43,37,-76,83,-30,-39,105,-23,28, 
  /* [94][0][][] */ -111,55,-81,24,78,-127,-13,19,8,-57,82,-32,3,4,-12,-17, 
  /* [95][0][][] */ -23,44,9,-127,-4,1,-26,5,12,-33,-55,-67,8,20,-58,0, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00063877890352159739, 0.00079219759209081531, 0.00048984150635078549, 0.00024129649682436138, 0.00070172298001125455, 0.0012984266504645348, 0.0011670051608234644, 0.00090903620002791286, 0.00027619497268460691, 0.0010988638969138265, 0.00083551381248980761, 0.00047307673958130181, 0.00044405966764315963, 0.00071182410465553403, 0.00024623170611448586, 0.0013792152749374509, 0.00064794311765581369, 0.00047492978046648204, 0.00047652173088863492, 0.00063342263456434011, 0.00099131010938435793, 0.0018868171609938145, 0.00049601931823417544, 0.0017966445302590728, 0.0016269850311800838, 0.00079245015513151884, 0.00057773466687649488, 0.00069125840673223138, 0.00080844532931223512, 0.00031094145379029214, 0.00018628756515681744, 0.00046330210170708597, 0.000684568309225142, 0.0010862143244594336, 0.00061589619144797325, 0.00076560955494642258, 0.0010705051245167851, 0.0011230672243982553, 0.00050972786266356707, 0.0022682263515889645, 0.00043191641452722251, 0.00052515428978949785, 0.0002645379863679409, 0.0009023271850310266, 0.00042240513721480966, 0.00052199047058820724, 0.0010127779096364975, 0.0004562781541608274, 0.00020500735263340175, 0.00064091919921338558, 0.00085078412666916847, 0.00055025151232257485, 0.00097731978166848421, 0.00071994075551629066, 0.0011895952047780156, 0.00049744191346690059, 0.00065611611353233457, 0.00031809986103326082, 0.001144060748629272, 0.00054747966350987554, 0.00086714612552896142, 0.00025520470808260143, 0.00062888499815016985, 0.00040814987733028829, 0.00068192207254469395, 0.00081737886648625135, 0.00088918628171086311, 0.00069933361373841763, 0.00091712496941909194, 0.00065822945907711983, 0.00064910249784588814, 0.00049766420852392912, 0.0003196976613253355, 0.00052179710473865271, 0.001383742899633944, 0.00068774918327108026, 0.00071268068859353662, 0.00097563693998381495, 0.0010188502492383122, 0.001234611845575273, 0.00042146275518462062, 0.00042596034472808242, 0.00041852187132462859, 0.00037703741691075265, 0.00110186159145087, 0.00083235523197799921, 0.0006564702489413321, 0.00021182125783525407, 0.00042473117355257273, 0.00061877089319750667, 0.00074099772609770298, 0.0010965450201183558, 0.00064522959291934967, 0.00066853256430476904, 0.00071559706702828407, 0.0003851739747915417, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -4001, -1640, -11786, 30908, 26423, 2905, -5999, -3808, 24103, 1617, 28215, 22391, -11544, 12562, 37813, -28283, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00047849491238594055, 0.00024393944477196783, 0.0002716739836614579, 0.00021067803027108312, 0.00031271419720724225, 0.00033566105412319303, 0.00027935544494539499, 0.00035148838651366532, 0.00022420543245971203, 0.00025835927226580679, 0.0003486921195872128, 0.00058867852203547955, 0.00039082678267732263, 0.0004722187586594373, 0.00045051777851767838, 0.00034238764783367515, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -9,16,-11,18,42,64,-35,-26,44,0,20,11,-14,7,24,65,2,-8,-5,-11,94,-48,12,-15,-29,-31,-42,-85,-1,-6,40,47,108,-5,2,1,14,-24,-22,5,-24,11,18,-29,0,-29,-13,30,-16,22,-3,-6,-37,-15,-2,-3,43,20,-21,-21,-61,26,-10,-10,14,16,52,2,13,2,7,-20,-59,-9,4,0,-8,-91,6,-18,40,-19,-58,-45,29,-5,7,25,-12,7,22,-25,23,17,-12,127, 
  /* [1][0][][] */ 80,-98,50,84,-10,-75,-18,-51,-19,-95,-12,37,8,-59,-32,-52,-94,-11,25,30,-38,-107,-43,32,127,-68,-82,18,-20,92,-23,53,3,23,-36,20,-24,-18,65,-35,-13,-73,78,-34,-62,17,49,-12,32,31,-5,-72,67,-83,48,-14,33,26,-22,-106,32,-68,13,-48,-4,-97,38,57,42,54,-49,5,-107,53,-14,64,42,102,16,-32,37,1,-83,33,-93,55,-8,62,-46,7,18,19,17,-58,42,8, 
  /* [2][0][][] */ 29,13,15,-23,2,4,-4,35,56,-10,10,67,5,4,49,-2,-5,-18,6,-8,-19,-65,9,-50,2,-12,-22,19,-12,24,122,-56,24,-67,-23,53,14,127,-49,-17,8,-19,0,46,-39,-53,-55,23,33,22,-26,-26,30,6,-4,-31,-28,7,-9,25,9,6,78,93,11,-80,13,-76,-8,-11,-6,11,-21,13,-29,16,20,61,3,15,18,82,32,-9,-15,4,15,9,30,11,0,-58,-46,11,-7,58, 
  /* [3][0][][] */ -8,-19,-34,33,24,-21,-1,-19,-22,11,3,-2,7,-20,41,-11,38,-39,19,7,-14,-11,-18,-3,-12,14,8,-3,18,-46,63,-13,20,-18,-15,55,-12,-3,-19,12,18,-69,18,-29,-3,-1,1,-2,-127,46,-8,25,-119,-60,-31,-37,34,9,-11,56,0,21,10,13,-15,-94,-43,29,58,19,4,32,-38,12,-14,-48,-44,-51,22,-41,14,-22,17,69,45,61,38,13,35,-12,-6,-2,-37,4,-17,-33, 
  /* [4][0][][] */ 5,-33,11,-79,-2,-20,-56,16,-30,-54,-27,-18,2,80,17,10,53,-9,11,2,-8,37,54,4,-8,-3,16,19,-1,-16,-10,-3,-43,11,6,22,42,-29,-1,-13,18,11,-108,-34,29,-5,-7,-19,0,91,-10,-23,-28,-25,12,-3,5,-37,25,40,11,4,10,-8,41,-115,28,-18,-51,18,-8,6,-7,12,-16,34,-22,69,50,9,15,10,127,-45,47,-15,-10,3,65,12,2,15,-41,25,-5,-43, 
  /* [5][0][][] */ -6,5,-7,-7,-8,-11,-1,120,47,-21,-8,-37,-18,23,36,23,-17,-10,0,-37,-40,-10,-5,-49,16,9,23,81,62,1,66,51,-40,14,1,-3,-43,-48,-37,-11,-25,-12,-10,-3,58,16,12,6,8,7,-12,11,-28,-20,6,-8,-18,-21,-4,39,-40,22,-16,-43,13,21,-24,2,1,18,7,3,35,0,0,-3,2,27,7,120,0,-39,19,29,10,7,28,-22,-5,-18,25,-127,-40,-11,-10,-119, 
  /* [6][0][][] */ -24,1,-15,-56,-1,-24,-14,16,-1,19,-14,-4,30,-61,11,-14,-8,-70,25,18,6,9,-23,20,79,-9,-3,5,24,-12,8,-4,-25,3,-18,4,20,3,24,33,-7,-23,-50,-16,-7,-20,22,-127,17,37,22,11,8,0,-2,-38,41,-13,-7,9,19,17,-1,7,37,64,27,-17,-22,-9,11,-20,14,3,47,-5,-26,27,3,-1,-15,-11,45,-32,1,46,19,-19,22,5,-38,-2,-17,5,-7,15, 
  /* [7][0][][] */ 14,7,34,-22,-7,5,-4,-24,-6,-11,-19,-19,-6,-96,23,1,-3,-31,-18,-6,13,-19,-37,-6,-16,-12,4,-22,5,10,10,4,-8,5,-10,-18,-2,-7,-31,28,12,-15,-22,30,-1,11,-12,71,3,21,-8,-23,-21,8,-7,-53,36,1,-2,-1,-1,8,-11,-8,-18,34,11,-31,-14,-8,4,35,-9,-6,-18,8,51,10,-4,-25,6,-39,38,3,-36,127,-2,0,-29,-26,-5,15,-26,2,-5,0, 
  /* [8][0][][] */ -70,41,-50,-3,42,-12,-15,22,15,69,-37,18,9,40,70,-9,-5,34,-72,10,12,32,-27,0,-44,-19,18,17,57,-93,-5,-8,20,7,7,-6,-11,23,-39,42,5,13,15,-127,-43,-6,46,-15,-56,23,-9,67,-110,71,17,-1,13,-21,-26,-12,-6,-38,9,23,-33,40,29,-23,-10,-1,32,85,-24,27,46,34,-9,-93,-4,-28,-14,-9,18,-1,-59,12,12,-38,-3,41,-21,10,36,-18,-18,-5, 
  /* [9][0][][] */ 30,-53,-29,-40,14,19,-25,26,27,-22,4,8,-51,-21,4,19,-9,3,44,-19,-26,11,-32,-43,36,11,24,-6,-36,-43,-25,4,-15,10,18,32,12,40,-36,16,14,8,-23,-85,4,-7,23,-127,-41,4,-4,22,-21,1,-8,7,-42,21,-16,15,12,6,11,26,25,123,41,49,8,-15,23,-17,-7,-5,-30,8,68,0,11,15,-9,3,8,-47,6,33,-1,-4,-56,31,-37,-3,6,5,6,-13, 
  /* [10][0][][] */ 24,49,-21,39,66,-122,-17,-26,6,55,35,-8,-20,18,19,-76,16,39,-27,40,-89,-6,-10,-25,-67,-29,-60,58,19,5,-4,40,-11,-10,30,-15,80,-26,-10,-5,-6,71,55,-19,-64,-16,-43,10,-24,-29,-38,5,-17,-16,5,-13,11,28,-23,-11,4,10,-12,29,12,42,51,23,33,0,31,63,-49,-25,-55,-15,1,27,-19,1,33,-2,-64,-32,64,-54,99,-5,-25,11,29,-13,84,42,-14,-127, 
  /* [11][0][][] */ 49,46,-29,24,-5,17,54,9,-8,-18,-25,-17,2,6,33,-3,1,-7,-104,-6,5,9,0,-10,-40,-21,-11,1,-1,21,4,-3,-3,3,3,21,12,17,-11,24,11,24,59,-94,33,-36,7,-3,-127,8,11,-50,26,21,-14,12,-19,-14,8,0,17,-20,-10,4,-47,53,-21,9,17,-3,30,8,-49,-25,7,30,-1,-31,-52,6,15,-1,91,48,5,-10,-10,-9,6,21,-18,-7,-6,9,-22,9, 
  /* [12][0][][] */ -33,-3,5,1,-24,33,15,4,127,4,-6,0,-2,7,-35,-44,30,28,12,72,60,32,-8,-22,-1,15,18,-23,-111,9,29,-35,3,-10,-14,-16,24,2,34,-11,-38,-25,1,12,1,31,13,-1,16,2,-41,17,3,-2,9,-13,68,-26,16,17,16,-16,18,-10,1,36,-41,-5,-2,3,-6,-34,17,7,-74,10,26,-4,13,-59,-6,7,42,40,-7,-6,-22,-22,5,23,2,44,-20,-21,13,9, 
  /* [13][0][][] */ 29,-11,-28,29,29,-5,10,-1,-5,2,11,-6,7,-9,15,-9,18,-68,-34,10,-9,-16,12,6,9,10,1,-1,-9,-34,-9,16,-3,7,6,46,17,-5,8,14,1,9,25,34,15,16,-10,-127,15,-5,6,8,-19,-6,21,4,-11,15,24,13,6,19,-4,5,-12,-16,-21,-55,6,14,-8,-28,-15,31,-6,23,-26,2,14,-2,28,-9,-15,14,14,29,16,23,-6,1,25,-3,2,13,-9,-5, 
  /* [14][0][][] */ -119,-47,30,50,30,-27,-28,8,-12,9,-14,18,63,15,-127,4,76,-16,-17,30,-16,-8,43,20,-111,6,31,-10,-33,-75,-34,-6,-7,2,23,-67,24,30,4,17,9,30,0,-34,15,123,71,64,-115,53,7,29,-54,-4,38,0,11,12,64,55,30,51,13,47,-6,-14,-40,46,9,76,-59,-85,-85,0,3,43,-17,34,89,-1,58,14,33,24,39,7,43,31,23,44,70,4,5,28,23,-20, 
  /* [15][0][][] */ 89,-26,41,9,-1,81,38,-22,-8,58,3,10,-83,-16,-10,37,19,43,45,-18,9,18,-83,73,27,8,49,-9,32,50,-59,-82,14,-50,39,-6,36,-30,-52,-106,-8,31,10,40,4,49,-22,-37,112,-51,-50,32,49,-120,62,-110,-6,-57,15,16,-127,-1,13,25,83,-27,-61,45,-32,71,-28,17,41,34,22,0,21,-56,73,-14,-11,0,48,85,-22,-8,0,-52,9,-9,66,8,-62,58,25,-18, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.020336033776402473, 0.010367426089942455, 0.011546144261956215, 0.008953816257417202, 0.013290353119373322, 0.014265595003962517, 0.011872606351971626, 0.014938255771994591, 0.009528730995953083, 0.010980268940329552, 0.014819414354860783, 0.025018837302923203, 0.016610138118267059, 0.020069297403097153, 0.019147004932165146, 0.014551474712789059, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 9690, -9261, 2997, 47505, -1550, -4609, -10603, 3501, -2706, 1077, 3095, -1772, 992, -4232, 5401, -6723, -1246, 17184, 24968, 2264, 4440, -3398, 516, 161, 16884, -492, -936, -4301, -5533, -7306, 5056, -8886, -582, -2291, 252, 12809, 1374, -3643, 20412, 456, -847, 2286, -9719, -7605, -7271, 68160, -259, 13475, 29669, -12291, -567, 6134, 7316, -255, -4618, 2470, -12237, 1903, 1980, -6525, -1732, -1068, -14303, -432, 1952, 14307, 28744, 22458, -11706, -52, -8462, -1182, 45466, 10755, 452, 447, 18263, 33008, -656, -6834, -1563, -4354, 508, -3407, 937, 862, 1550, -92, 1858, -3401, 41, -747, -872, -600, 49, 51005, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00022403904586099088, 0.00011711760453181341, 0.00026227685157209635, 4.4209868065081537e-05, 0.00016510281420778483, 0.00015181176422629505, 0.00030780796078033745, 8.1434998719487339e-05, 0.00011693783744703978, 0.00048087537288665771, 0.00015382944548036903, 0.00033027591416612267, 8.1124868302140385e-05, 0.00045818259241059422, 0.00018586889200378209, 0.00010933358134934679, 0.00010632456542225555, 0.00030549406073987484, 6.4242914959322661e-05, 0.00022646952129434794, 4.2909447074634954e-05, 0.0001894841407192871, 0.00016432401025667787, 0.00035880939685739577, 0.00020789305563084781, 0.0002381115045864135, 0.0001456198951927945, 0.00017112279601860791, 0.00011735185398720205, 9.9688120826613158e-05, 0.0001472071890020743, 0.0001733734825393185, 0.00012713867181446403, 9.684226824901998e-05, 0.00021363000269047916, 0.00018487368652131408, 0.00040994124719873071, 0.00012181360943941399, 5.5993717978708446e-05, 0.00014039814413990825, 0.00017759451293386519, 0.00037725880974903703, 0.00031678826780989766, 0.00016225942817982286, 0.00018296891357749701, 6.0523707361426204e-05, 0.00025117467157542706, 0.00025738970725797117, 8.8206805230583996e-05, 0.000188854755833745, 0.00017035700147971511, 0.00019922375213354826, 0.00024440162815153599, 0.00028811983065679669, 0.00028504591318778694, 0.00045512578799389303, 0.0002987412444781512, 0.00018475962860975415, 0.00012132620031479746, 8.1445286923553795e-05, 0.00028687299345619977, 0.00015895925753284246, 0.00026626180624589324, 0.00014382727385964245, 0.0002096974931191653, 0.00020574308291543275, 8.1789206888061017e-05, 8.0032186815515161e-05, 0.00035455983015708625, 0.00026754743885248899, 0.00021299572836142033, 0.00011099688708782196, 0.00012758934462908655, 0.00016167754074558616, 0.00015447958139702678, 0.00025067297974601388, 0.00048788741696625948, 5.7166838814737275e-05, 0.00027672137366607785, 0.00027484088786877692, 0.0001636774541111663, 0.00049238500650972128, 0.00012807377788703889, 0.00015013721713330597, 0.0001378566084895283, 8.8480097474530339e-05, 0.00014804724196437746, 0.00018794639618135989, 0.00021684198873117566, 0.00010258830297971144, 0.00022388642537407577, 0.00010534351167734712, 0.00015768675075378269, 0.00048503041034564376, 0.024924598634243011, 7.633065979462117e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,6,-20,104,-17,23,-63,-54,16,-6,99,-9,4,-7,-5,54,4,16,-34,4,73,3,32,-32,2,17,43,50,21,13,24,47,-7,28,9,-15,5,48,-61,-26,20,9,27,18,-84,-56,26,-5,-11,-20,-8,-6,48,5,-10,1,-3,-36,28,-31,27,-2,127,27,-14,-10,11,-54,66,35,3,-7,79,-32,70,4,17,-127,30,64,1,16,127,-14,37,29,-28,-19,34,-7,-14,82,2,20,-2,12, -49,12,-8,9,51,-8,-11,-127,37,14,-127,-4,-16,-12,3,93,18,-30,-15,-15,77,-96,127,27,-61,-31,-105,-15,27,35,-49,18,118,12,-14,-1,-24,127,-64,-127,8,-19,-30,14,47,-127,127,-44,-76,49,49,7,38,-64,31,56,36,42,-101,83,127,35,4,-20,42,-37,-95,-2,37,-30,-18,45,-49,-47,108,-4,-29,-60,-32,63,-66,63,-15,9,-11,48,55,-41,-28,53,-12,73,-127,-31,23,-127, 0,-4,-23,-75,8,18,37,21,-4,-2,5,64,1,-13,-11,6,-13,17,-17,18,6,25,24,-31,1,-32,9,13,-6,4,46,-78,45,18,9,-23,12,4,-30,-20,7,3,-16,9,23,-31,21,1,7,-9,5,-5,4,5,-6,8,-7,44,6,-3,10,-17,3,-17,-27,-18,31,-52,-106,-7,42,-18,-127,-22,-11,16,11,-11,6,11,-13,24,-35,-2,-41,21,26,37,-25,-18,25,-11,20,7,-2,-45, 
  /* [0][1][][] */ -41,60,-17,37,-86,-16,-10,-43,25,95,-44,-22,-31,-24,-7,62,127,-24,-90,-13,57,-127,-28,16,-35,-47,-127,-6,37,37,-49,28,-127,-75,-58,3,66,-3,-52,46,-19,86,0,-4,35,-53,-12,-31,127,43,-3,21,44,9,-37,-17,32,9,-124,127,-37,-88,21,127,-60,-36,-85,126,-36,127,-18,52,-36,-54,37,8,-35,-69,127,48,127,35,6,-1,127,29,-96,47,-38,-35,-102,40,99,102,29,-57, 127,127,127,127,-46,-127,127,24,127,-127,15,-127,-107,127,127,127,-16,-127,-60,-127,127,23,-67,127,127,127,-55,-127,127,127,-127,127,-9,-127,-126,127,-127,-44,95,108,-127,-127,127,127,127,-119,-106,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-43,40,-106,-27,-70,-67,127,127,-71,127,127,-106,-127,127,-41,127,-127,-127,-127,124,-74,127,-43,127,78,127,-38,-127,-25,-108,-127,-126,-23,-127,-21,-127,-127,116, -24,66,-37,2,127,70,-21,48,4,23,-13,-5,-27,-31,-13,-8,-104,-21,-127,39,30,78,-12,-115,-34,-41,124,74,10,36,73,8,127,-47,127,-4,55,5,-96,14,35,23,-23,0,-23,-54,-12,-42,81,14,-11,40,-6,-4,-77,-14,25,19,127,-89,2,127,0,-36,-111,-28,-75,100,15,-17,114,24,-18,-55,12,47,-28,-8,-43,-3,-46,9,46,24,-90,34,127,-47,32,-23,127,-10,-113,35,34,19, 
  /* [0][2][][] */ -5,-40,-21,-61,-5,14,40,32,-3,9,-20,53,23,-33,-8,5,41,2,14,22,-10,30,-16,-25,2,-24,9,3,-9,-7,50,-75,-39,67,-29,-25,31,-35,-64,16,8,9,-35,20,13,-79,-12,-1,-10,7,17,-7,7,1,-23,6,0,43,-50,34,-6,-13,5,17,-6,-10,22,-53,-57,11,-21,-13,-118,-31,1,17,15,-12,56,17,22,23,-40,15,11,25,-21,9,4,25,23,-5,20,40,-7,-30, -28,-11,-26,23,-45,74,-25,65,5,-6,53,-11,127,-6,-19,-19,0,-40,-57,24,-23,80,-44,-111,-47,-47,101,71,14,44,55,-2,-123,63,-16,-24,-29,-27,-127,-4,44,-14,-15,38,-26,-44,-17,-47,-60,28,69,25,-12,-80,29,52,18,26,74,-55,20,-57,-8,1,19,-26,-127,-55,-12,-26,-63,22,36,-45,-29,-7,-44,23,-55,1,49,35,18,11,5,63,-93,127,15,127,-30,-18,116,-21,46,82, -10,-35,-25,28,12,65,-43,13,3,-6,0,13,12,-51,-10,-14,-43,-6,17,20,-25,6,-20,4,-3,19,-2,52,-2,-5,35,28,18,42,19,-23,-6,-26,-31,7,11,-12,21,9,-73,-33,-12,5,-2,-16,0,-4,-9,8,-18,-5,-1,-50,12,-29,-22,49,9,-28,-10,-2,35,-55,45,7,53,-21,30,-54,-17,22,11,10,-5,22,-30,33,89,-14,-18,54,38,-9,108,11,2,-19,11,-22,-6,-50, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0095216594636440277, 0.0049774982035160065, 0.011146766133606434, 0.0018789194291457534, 0.0070168697275221348, 0.006451999768614769, 0.013081838376820087, 0.0034609872382134199, 0.0049698580987751484, 0.020437203347682953, 0.0065377512946724892, 0.014036726206541061, 0.003447806928306818, 0.019472759217023849, 0.0078994277864694595, 0.0046466770581901073, 0.0045187938958406448, 0.012983497232198715, 0.0027303237002342939, 0.0096249543130397797, 0.0018236514879390597, 0.0080530755221843719, 0.0069837700575590134, 0.015249398536980152, 0.0088354544714093208, 0.01011973898857832, 0.0061888457275927067, 0.0072727184742689133, 0.0049874535761773586, 0.0042367451824247837, 0.0062563051469624043, 0.0073683727532625198, 0.0054033934138715267, 0.0041157961823046207, 0.0090792747214436531, 0.0078571317717432976, 0.017422502860426903, 0.005177078302949667, 0.0023797329049557447, 0.0059669208712875843, 0.0075477664358913898, 0.01603349857032299, 0.013463500887155533, 0.0068960255011916161, 0.0077761788852512836, 0.002572257537394762, 0.010674922727048397, 0.01093906257301569, 0.0037487891968339682, 0.0080263270065188408, 0.0072401724755764008, 0.0084670092910528183, 0.010387069545686245, 0.012245092540979385, 0.012114451266825199, 0.019342845305800438, 0.012696502730250359, 0.007852284237742424, 0.0051563633605837822, 0.0034614244941622019, 0.012192102149128914, 0.006755768321454525, 0.011316127143800259, 0.0061126588843762875, 0.0089121432974934578, 0.008744080550968647, 0.0034760411363095045, 0.0034013679251074791, 0.01506879273802042, 0.0113707659766078, 0.0090523185208439827, 0.0047173677012324333, 0.0054225469939410686, 0.0068712951615452766, 0.0065653822384774685, 0.010653601959347725, 0.020735215395689011, 0.0024295905604958534, 0.011760657653212547, 0.011680737137794495, 0.0069562913849949837, 0.020926361903548241, 0.005443135742098093, 0.0063808313570916653, 0.0058589056134223938, 0.0037604039534926414, 0.0062920073978602886, 0.00798772182315588, 0.0092157842591404915, 0.0043600029312074184, 0.0095151728019118309, 0.0044770990498363972, 0.0067016868852078915, 0.020613791421055794, 1.0592954158782959, 0.0032440528739243746, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 18205, 1608, 9062, -641, 5365, 5366, 13003, 6532, -1430, 16402, 6594, 1876, 6657, 50123, -528, -2190, 9094, 12102, 1630, -169, -884, 15046, 4541, 3180, 6982, 4591, 5510, 4409, 96, -63, 6062, 9826, 18418, 1925, 8169, -580, 21396, 8695, 809, 4629, 743, 13911, 9184, 4636, 3882, 11085, 14450, 6563, 4892, 3757, 265, -773, 16334, 6427, 7406, 17286, -288, 7456, 3684, 3683, 12777, 6379, 3423, 7548, 5103, 4542, 6504, -786, 16815, 7153, 8704, -1147, -1178, 3115, 1664, 2969, 22510, 12150, 12509, -2441, 5461, -5475, -1635, 527, 7151, 5002, 7226, 4776, 11799, 4257, 7753, 3698, 13260, 20291, -10304, 13355, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.0001426133094355464, 0.00021844623552169651, 0.0001481546787545085, 0.0008779085474088788, 0.00030144024640321732, 0.00017325101362075657, 0.00024047039914876223, 0.00053801288595423102, 0.00031208977452479303, 0.00011026262654922903, 0.00021659489721059799, 0.00044396938756108284, 0.0004149602900724858, 9.6382493211422116e-05, 0.00022122783411759883, 0.00031146896071732044, 0.00024384635617025197, 0.00019339758728165179, 0.00026133062783628702, 0.00065869133686646819, 0.00033025085576809943, 0.00016448037058580667, 0.00033019081456586719, 0.00024817831581458449, 0.00025431168614886701, 0.00045400680392049253, 0.00025886655203066766, 0.00020221907470840961, 0.00046827777987346053, 0.00038962493999861181, 0.00024051642685662955, 0.00019047004752792418, 0.00010784502956084907, 0.00056457688333466649, 0.00020572001812979579, 0.00045819723163731396, 0.00010601774556562304, 0.00030328004504553974, 0.00060313305584713817, 0.00020776005112566054, 0.00063625071197748184, 0.00013708186452277005, 0.00023256090935319662, 0.00016537736519239843, 0.00028612258029170334, 0.00029446932603605092, 0.00019578197679948062, 0.00022022187476977706, 0.0003260150842834264, 0.00023309113748837262, 0.00042326428228989244, 0.00086090998956933618, 0.00016298881382681429, 0.00024736381601542234, 0.00031420201412402093, 0.00010719768761191517, 0.00041783784399740398, 0.00023350304400082678, 0.00021026143804192543, 0.00043760015978477895, 0.00013357690477278084, 0.00022021846962161362, 0.00031150039285421371, 0.00036502091097645462, 0.00020796696480829269, 0.0002436596987536177, 0.00029624768649227917, 0.00041977062937803566, 0.00016021235205698758, 0.00016218397649936378, 0.00022837404685560614, 0.00041747165960259736, 0.00032175233354791999, 0.00041637881076894701, 0.00025670800823718309, 0.00042996316915377975, 0.00010492387809790671, 0.00037162052467465401, 0.0001326954661635682, 0.0005012821638956666, 0.00019860893371514976, 0.00037840544246137142, 0.00023037666687741876, 0.00047485952381975949, 0.00022414624982047826, 0.00031234687776304781, 0.00022496473684441298, 0.00029049426666460931, 0.00014287844533100724, 0.00037555699236690998, 0.00018049878417514265, 0.00045665469951927662, 0.00015753584739286453, 0.00013611179019790143, 0.00028434034902602434, 0.0002437280782032758, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 43,-30,120,120,80,-48,33,-25,127,-14,-67,-71,37,102,-53,-80, 
  /* [1][0][][] */ 36,97,-6,2,95,0,12,29,69,79,-47,127,3,-23,108,-109, 
  /* [2][0][][] */ 16,-65,2,17,-72,45,-44,114,-68,-82,21,102,-18,-127,86,-99, 
  /* [3][0][][] */ 127,126,-1,44,-127,-15,-62,-24,-7,3,111,-69,-65,101,-43,-44, 
  /* [4][0][][] */ 0,-6,22,11,-25,30,-20,36,-63,-39,-5,-1,-5,-127,28,1, 
  /* [5][0][][] */ 123,-46,-35,-5,-19,-127,-22,17,-14,5,-122,-9,25,-12,-4,37, 
  /* [6][0][][] */ -127,-68,-17,88,-55,10,-37,36,-125,-78,-65,-25,22,51,-8,112, 
  /* [7][0][][] */ -20,16,-79,51,42,-127,-21,43,11,-28,16,-3,-5,18,-44,14, 
  /* [8][0][][] */ 43,-48,-10,-18,11,34,-74,-79,-15,5,-80,1,-127,-3,-6,35, 
  /* [9][0][][] */ 27,-64,71,127,21,23,-14,-88,126,-104,-2,-21,4,55,-65,24, 
  /* [10][0][][] */ -123,-57,4,-49,113,58,58,76,124,-83,-90,33,103,-114,-127,89, 
  /* [11][0][][] */ 49,-15,-127,22,58,16,-28,33,-9,-37,-20,-12,5,16,-40,9, 
  /* [12][0][][] */ 126,-53,9,-1,-13,-61,-69,-22,43,-3,-127,-25,-42,-25,3,70, 
  /* [13][0][][] */ 21,-100,29,-89,86,-2,-117,-127,27,-94,24,22,10,-34,32,13, 
  /* [14][0][][] */ -47,22,-90,-43,99,-127,52,-69,68,48,-10,-101,34,123,-28,30, 
  /* [15][0][][] */ 36,-11,72,48,59,-40,-46,-18,27,-69,-70,-5,-127,-54,-22,48, 
  /* [16][0][][] */ -127,56,-3,16,0,77,43,64,-17,25,109,11,-6,10,14,-41, 
  /* [17][0][][] */ -8,-9,-48,-37,-37,8,44,75,-27,127,-21,6,-9,77,67,3, 
  /* [18][0][][] */ 1,127,-52,-5,1,4,59,-68,22,109,-49,101,16,-48,36,-90, 
  /* [19][0][][] */ 5,-15,33,15,3,45,-7,18,12,4,-37,-7,-127,-1,-13,31, 
  /* [20][0][][] */ 97,-63,-1,-87,-25,26,22,-94,-51,29,-127,-43,32,7,52,6, 
  /* [21][0][][] */ 49,-11,127,48,-26,64,28,5,2,36,-20,-8,-10,87,-2,-2, 
  /* [22][0][][] */ 35,1,16,10,-20,-6,22,127,15,1,3,31,-2,36,29,25, 
  /* [23][0][][] */ -28,17,-82,15,12,-127,15,42,2,-21,-10,-2,-64,8,4,33, 
  /* [24][0][][] */ 35,-62,-3,-51,49,-11,-25,-12,38,32,49,82,-34,79,127,40, 
  /* [25][0][][] */ -127,-90,-44,10,20,12,11,-39,-61,0,-74,21,15,44,22,57, 
  /* [26][0][][] */ 13,-5,46,2,-3,11,-37,69,-88,-54,-4,18,-3,-127,38,-24, 
  /* [27][0][][] */ -97,47,-49,29,31,-23,-1,26,33,-35,127,34,-21,1,-19,-26, 
  /* [28][0][][] */ -15,-11,23,38,-2,5,18,91,32,18,-22,-2,-127,-8,-17,37, 
  /* [29][0][][] */ -13,64,34,-41,30,-10,26,-21,-127,33,-24,0,-3,26,-81,15, 
  /* [30][0][][] */ -12,-7,-127,-38,18,-67,0,22,-14,-13,-7,-23,-37,-23,16,19, 
  /* [31][0][][] */ 127,-37,-115,15,45,0,-47,58,-16,-2,-80,-47,5,-4,-86,21, 
  /* [32][0][][] */ -121,47,32,57,23,106,27,45,30,4,127,13,-39,32,-15,-34, 
  /* [33][0][][] */ 1,-13,127,-18,-70,28,13,-31,-2,13,-4,26,-8,22,41,24, 
  /* [34][0][][] */ -19,-25,-57,-125,37,7,6,-29,-27,-56,-34,-127,-19,1,58,8, 
  /* [35][0][][] */ 8,-38,41,47,62,-32,12,-29,-127,35,-20,21,-20,122,-38,-45, 
  /* [36][0][][] */ -125,61,-34,7,-5,55,50,92,0,34,127,-5,8,10,17,-26, 
  /* [37][0][][] */ -41,13,127,-27,-77,-66,29,-35,23,24,-2,8,-6,-61,67,10, 
  /* [38][0][][] */ 10,-7,-12,20,27,-43,-56,8,-19,-22,73,-14,127,22,-13,9, 
  /* [39][0][][] */ -19,-21,-14,-42,-66,-100,78,127,-35,-7,-2,-60,1,66,68,64, 
  /* [40][0][][] */ 63,-6,-18,-9,0,79,-20,2,14,-3,11,5,127,11,-23,-23, 
  /* [41][0][][] */ -9,-9,-35,-127,27,-2,-24,-70,-12,-46,14,-37,-4,-25,-21,38, 
  /* [42][0][][] */ 37,62,-3,98,-127,-1,-92,1,-89,-60,91,-99,-58,117,-39,19, 
  /* [43][0][][] */ 12,125,-36,127,16,22,45,-85,-52,79,0,20,4,-54,54,44, 
  /* [44][0][][] */ -5,-31,-127,23,63,85,-56,55,-15,-30,34,-20,15,-26,-62,5, 
  /* [45][0][][] */ -8,25,-17,-127,-26,-11,50,-11,-16,23,-38,6,-1,-95,31,-29, 
  /* [46][0][][] */ 21,31,65,-25,15,3,-58,52,14,-55,-36,19,16,127,45,-12, 
  /* [47][0][][] */ 13,-16,26,-44,-35,22,-61,60,-16,-34,22,38,3,-127,38,14, 
  /* [48][0][][] */ 0,-9,11,-127,-4,-13,-11,3,9,-35,18,-17,3,41,-10,51, 
  /* [49][0][][] */ 25,-42,-3,111,83,10,7,54,-66,17,40,47,-14,30,127,-9, 
  /* [50][0][][] */ -17,-24,85,-21,9,127,-34,-61,40,-35,116,42,105,-4,-10,-65, 
  /* [51][0][][] */ 25,57,4,7,15,2,-43,23,52,7,1,127,16,37,38,-50, 
  /* [52][0][][] */ -28,59,127,7,12,-37,5,-63,-29,2,7,30,5,88,-123,-7, 
  /* [53][0][][] */ 0,-13,-40,-127,-45,10,17,-43,-17,43,8,-8,24,-23,46,6, 
  /* [54][0][][] */ 2,17,-35,-46,13,4,-4,19,59,-17,0,-34,-16,127,24,31, 
  /* [55][0][][] */ -11,-34,-50,-16,12,-51,-11,-127,1,-103,-7,-1,-40,-84,-46,-11, 
  /* [56][0][][] */ 33,38,26,58,-1,-24,20,127,18,-21,5,-29,67,-11,-48,31, 
  /* [57][0][][] */ 84,-29,127,-32,-62,-52,2,-29,20,14,-96,36,53,-48,47,29, 
  /* [58][0][][] */ 113,109,17,121,-127,-25,-7,49,-25,22,99,-22,-93,-76,-32,-92, 
  /* [59][0][][] */ 127,-38,-5,-1,-26,-13,-7,13,-27,15,-123,-12,23,-2,2,31, 
  /* [60][0][][] */ -127,32,-8,-4,13,12,14,24,7,6,87,1,-40,-7,15,-10, 
  /* [61][0][][] */ -102,74,25,22,27,-1,-72,-58,127,-94,60,3,63,-39,-104,-53, 
  /* [62][0][][] */ -14,-42,-127,64,76,99,-11,100,23,-63,32,-9,-80,4,-108,-15, 
  /* [63][0][][] */ -46,16,127,-32,-57,-54,33,-25,10,21,-3,16,-8,-45,72,10, 
  /* [64][0][][] */ 32,55,-18,25,53,-12,82,-127,-14,101,1,-24,-11,-109,-2,54, 
  /* [65][0][][] */ 10,17,10,-19,65,9,-5,-127,-24,-60,-30,-44,-12,-43,32,22, 
  /* [66][0][][] */ -127,8,-18,3,-47,20,14,-46,-77,-35,-78,46,59,20,53,84, 
  /* [67][0][][] */ -1,-36,4,127,7,3,-13,37,51,35,6,-8,-1,-33,-77,-17, 
  /* [68][0][][] */ 7,10,-11,127,-55,-19,4,-27,-51,30,10,-23,-27,-60,-30,-49, 
  /* [69][0][][] */ 70,93,22,109,47,-12,61,-127,4,104,25,50,-2,-39,27,-15, 
  /* [70][0][][] */ 18,-42,7,-81,127,-47,46,25,93,-15,60,-47,8,117,81,106, 
  /* [71][0][][] */ 14,49,6,76,40,-127,-41,95,33,-95,14,9,12,-60,-58,41, 
  /* [72][0][][] */ -127,-70,-11,53,22,33,-21,21,-41,-24,-88,43,40,23,-1,84, 
  /* [73][0][][] */ -25,-19,-17,55,12,-9,3,-19,82,17,5,2,27,127,-59,-42, 
  /* [74][0][][] */ 79,-55,13,-24,-44,-17,43,-21,-39,4,-109,18,-127,-11,23,52, 
  /* [75][0][][] */ -22,-16,-25,127,-31,17,2,-21,-75,19,-9,-23,-2,-56,-24,-29, 
  /* [76][0][][] */ -1,-19,-1,49,39,13,-27,-127,19,-124,6,24,-22,-17,32,-45, 
  /* [77][0][][] */ 127,-27,29,45,-40,-7,-38,-2,48,-3,-31,46,38,12,-43,33, 
  /* [78][0][][] */ -11,-4,54,1,16,-12,-61,35,47,-26,-38,-30,13,127,30,-32, 
  /* [79][0][][] */ -7,25,41,14,38,54,-50,-55,12,-43,79,-21,127,-25,-26,-42, 
  /* [80][0][][] */ -127,-83,-89,120,4,31,41,-13,-78,34,-98,6,53,-90,-16,48, 
  /* [81][0][][] */ 60,10,-60,41,127,98,-33,-31,0,-106,-14,-73,-27,-4,-104,21, 
  /* [82][0][][] */ 122,120,-10,30,-127,-18,-76,-25,-68,-5,103,-63,-44,87,-2,-32, 
  /* [83][0][][] */ 127,49,10,-29,2,-10,-7,26,33,16,91,-39,-57,-35,-28,-77, 
  /* [84][0][][] */ 8,-52,-68,-34,35,32,0,-127,-32,-62,28,11,-21,-9,-6,-12, 
  /* [85][0][][] */ -33,4,-44,-54,-7,-1,74,80,-14,127,-4,-50,30,59,68,-32, 
  /* [86][0][][] */ 112,-27,7,-5,4,-28,-6,-24,-3,1,-127,9,26,22,-17,30, 
  /* [87][0][][] */ -25,40,19,-30,-7,75,-35,42,0,-31,36,10,11,-127,14,-1, 
  /* [88][0][][] */ 1,-29,-116,-52,61,-23,-30,-127,0,-22,-14,-33,-48,-17,36,-14, 
  /* [89][0][][] */ 34,-23,40,-127,53,1,-62,123,101,-85,25,21,-2,59,28,40, 
  /* [90][0][][] */ -17,22,-52,47,68,-10,100,-96,66,127,-30,32,19,-10,-7,-15, 
  /* [91][0][][] */ 49,-21,-42,-5,-3,-127,-10,-6,1,0,-46,-7,35,-6,9,27, 
  /* [92][0][][] */ 20,11,127,55,39,6,-7,37,-22,22,-62,23,30,88,-7,-11, 
  /* [93][0][][] */ 120,-40,-51,-15,-34,-58,15,45,-22,46,-127,-2,5,21,-1,55, 
  /* [94][0][][] */ 16,-19,44,77,111,-32,-10,57,7,-15,-2,55,-6,127,-23,-77, 
  /* [95][0][][] */ -119,48,47,36,20,51,20,1,7,-2,127,-5,-18,37,-20,-33, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00045054676593281329, 0.0006901196320541203, 0.00046805318561382592, 0.0027735058683902025, 0.00095231592422351241, 0.00054733798606321216, 0.00075969879981130362, 0.0016997009515762329, 0.00098596012685447931, 0.00034834386315196753, 0.00068427086807787418, 0.0014025968266651034, 0.0013109507272019982, 0.00030449347104877234, 0.00069890730082988739, 0.00098399887792766094, 0.00077036418952047825, 0.00061098544392734766, 0.00082560081500560045, 0.00208095065318048, 0.0010433349525555968, 0.00051962962606921792, 0.0010431453119963408, 0.00078404980013146996, 0.0008034264319576323, 0.0014343071961775422, 0.00081781629705801606, 0.00063885445706546307, 0.0014793924055993557, 0.0012309107696637511, 0.00075984420254826546, 0.000601736712269485, 0.0003407061449252069, 0.0017836224287748337, 0.00064991472754627466, 0.0014475457137450576, 0.00033493334194645286, 0.00095812830841168761, 0.0019054297590628266, 0.00065635965438559651, 0.0020100558176636696, 0.00043307172018103302, 0.00073471100768074393, 0.00052246340783312917, 0.00090392405400052667, 0.00093029328854754567, 0.00061851827194914222, 0.0006957292789593339, 0.0010299532441422343, 0.0007363861077465117, 0.0013371848035603762, 0.0027198037132620811, 0.00051491748308762908, 0.00078147667227312922, 0.00099263316951692104, 0.00033866104786284268, 0.0013200414832681417, 0.00073768739821389318, 0.00066426204284653068, 0.0013824750203639269, 0.00042199878953397274, 0.00069571851054206491, 0.00098409818019717932, 0.0011531811906024814, 0.00065701332641765475, 0.00076977448770776391, 0.00093591155018657446, 0.0013261475833132863, 0.00050614599604159594, 0.00051237479783594608, 0.00072148378239944577, 0.0013188846642151475, 0.0010164863197132945, 0.0013154321350157261, 0.00081099697854369879, 0.0013583480613306165, 0.00033147758222185075, 0.0011740308254957199, 0.00041921413503587246, 0.0015836604870855808, 0.00062744924798607826, 0.0011954659130424261, 0.00072781048947945237, 0.0015001855790615082, 0.00070812721969559789, 0.00098677235655486584, 0.00071071303682401776, 0.00091773521853610873, 0.00045138437417335808, 0.001186467008665204, 0.00057023530825972557, 0.0014426724519580603, 0.00049769034376367927, 0.00043000702862627804, 0.00089829362696036696, 0.0007699905545450747, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -37897, 2568, 2127, -9382, 659, -5739, -12304, -43092, 3496, 26493, 32167, -10816, -613, -20843, 39536, -43752, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00070842198329046369, 0.00083134719170629978, 0.00098309118766337633, 0.0010245806770399213, 0.00081577949458733201, 0.0012270434526726604, 0.00093086843844503164, 0.00064978271257132292, 0.00072456919588148594, 0.00055918656289577484, 0.0008116254466585815, 0.00059808808146044612, 0.0011434700572863221, 0.0014980934793129563, 0.00060129928169772029, 0.000578616454731673, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -15,0,-21,8,25,-1,3,108,-53,19,44,-5,16,-14,-11,18,14,-14,-10,-7,65,-10,20,127,-18,90,-5,-12,28,-13,24,-24,-15,52,17,-50,14,47,17,-9,-109,-27,20,44,34,27,-127,-50, 
  /* [1][0][][] */ -37,-12,18,17,-30,10,1,54,-52,-37,5,-40,-24,-16,3,-2,-22,113,-8,20,8,11,-26,-15,28,-43,18,22,-27,-83,-39,20,-22,-2,35,-1,-3,-41,1,18,-16,-31,127,13,8,-3,24,-14, 
  /* [2][0][][] */ -22,-9,-13,-35,-1,-64,6,-23,1,14,18,26,18,17,-15,9,-3,-18,-22,-12,-2,-1,-2,-127,-12,73,-14,1,1,-22,-2,-5,-10,53,11,1,25,9,27,1,-41,4,-19,-7,-1,-9,17,7, 
  /* [3][0][][] */ -7,35,4,-30,-1,-1,3,-4,-18,-4,1,39,-127,5,-8,-3,0,5,-17,-2,-30,10,5,18,-6,-11,3,23,-9,19,6,16,3,1,18,20,-9,26,43,3,12,7,25,-31,8,-5,4,19, 
  /* [4][0][][] */ 38,-28,12,8,18,26,25,-20,-27,6,-13,-18,-2,14,-2,16,19,-8,-80,1,-6,10,15,71,0,-24,1,50,8,-70,17,10,12,-33,30,-127,10,38,0,16,-20,15,10,-25,-8,-16,7,9, 
  /* [5][0][][] */ 32,2,-18,55,-3,-10,8,27,1,-2,38,6,3,51,-1,1,-25,21,26,1,9,4,2,-22,-1,-47,3,-19,-1,-9,4,8,63,-127,3,28,-14,-13,14,3,-90,54,20,-6,-4,0,-101,-5, 
  /* [6][0][][] */ 25,-1,8,7,-12,-4,3,-12,-4,5,-3,8,-19,8,4,4,0,-14,127,6,5,10,16,-35,7,4,27,-10,-10,-2,-4,6,-1,-9,31,-39,-1,-44,71,13,2,-6,-6,6,-13,1,5,-13, 
  /* [7][0][][] */ -44,-17,-13,37,-7,76,-5,43,2,26,-8,127,80,-8,-11,-5,-6,-23,-5,-14,-28,-2,-18,71,2,-40,-53,-33,-10,-15,-11,-10,2,0,-19,6,11,-59,95,-5,26,28,-59,-57,14,-8,6,0, 
  /* [8][0][][] */ -45,-46,2,2,-7,3,-2,34,-5,-65,0,39,47,7,9,7,-10,58,-33,1,-52,17,-6,-14,0,3,0,46,-11,112,-12,22,-5,7,-22,-127,-110,68,35,25,20,-5,104,-25,11,29,17,33, 
  /* [9][0][][] */ -21,8,0,28,18,-37,-4,2,57,-41,5,55,-60,8,11,2,-9,17,-40,-26,50,7,-11,-18,2,13,52,-23,9,14,8,-4,-8,22,74,-109,-12,-127,-96,7,-32,23,58,6,6,8,-20,-41, 
  /* [10][0][][] */ -25,-8,-37,-127,46,92,9,-11,-2,33,23,12,46,-52,-28,22,37,-46,54,-31,33,-25,37,51,-46,-114,4,-32,45,34,43,-43,-28,-81,26,-5,18,-44,9,-36,-33,-63,-12,13,11,16,19,-38, 
  /* [11][0][][] */ -3,49,-13,67,38,-71,-81,-18,5,59,-17,0,-5,52,-9,-83,18,49,9,-4,-54,-104,12,6,16,-43,22,-23,58,-42,28,-91,47,-19,-35,-91,96,18,7,-127,-2,68,103,-73,-11,-60,35,30, 
  /* [12][0][][] */ 127,-3,-12,13,1,19,4,99,20,-12,-58,-26,-1,13,-11,-1,-8,7,-4,-6,4,0,2,18,-3,15,-1,6,-3,12,-4,6,1,-65,-10,10,-19,-15,-31,1,-15,-81,7,-122,-55,-8,78,-4, 
  /* [13][0][][] */ 11,3,2,4,7,-11,3,0,-1,6,2,20,-5,4,3,0,6,2,9,1,11,-13,10,-2,2,2,16,127,10,-3,5,-1,3,1,-38,20,8,-4,4,-14,-12,-4,1,6,0,0,-10,-11, 
  /* [14][0][][] */ 57,-21,42,-69,51,33,36,-99,-56,-53,-2,124,-75,-4,69,11,56,21,-56,68,16,13,68,-21,26,54,-28,-113,22,-34,57,41,-3,70,-127,-53,-41,41,93,6,-37,13,51,0,-1,-6,17,-30, 
  /* [15][0][][] */ -8,-53,-78,-35,60,24,75,-53,-8,17,-16,-33,84,16,-96,64,56,51,78,-78,-99,-23,58,-11,-91,40,24,52,53,48,50,-49,23,60,100,127,-15,-106,-13,-33,97,61,116,-46,-4,-31,-13,65, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.030107934027910233, 0.035332255065441132, 0.041781377047300339, 0.043544679880142212, 0.034670628607273102, 0.052149347960948944, 0.039561908692121506, 0.027615765109658241, 0.030794190242886543, 0.023765427991747856, 0.034494079649448395, 0.025418743491172791, 0.048597477376461029, 0.063668973743915558, 0.025555219501256943, 0.024591200053691864, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 2587, 37915, -1041, 44594, 4254, 125318, -1792, 46742, 5302, 29178, 29289, 3757, -1750, 33853, -1479, -1992, -321, -893, 3158, -1908, 791, -3805, -490, -22716, -5193, 36473, 133397, 104868, 2756, 2848, -2826, 77, 26510, -1860, 31018, -3516, 34854, 1195, 57872, 3424, -2087, 57817, -585, 2187, 47910, 170, 445, 48778, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.7856428106315434e-05, 4.1510076698614284e-05, 0.0001568365260027349, 5.1191498641856015e-05, 0.00015763308329042047, 6.899133586557582e-05, 0.00016303177108056843, 0.00012719949882011861, 6.9021596573293209e-05, 4.2404946725582704e-05, 6.1402948631439358e-05, 8.7220658315345645e-05, 4.601385080604814e-05, 4.2959894926752895e-05, 0.00016717419202905148, 0.00020039179071318358, 0.00020806481188628823, 7.7976277680136263e-05, 0.00010410651884740219, 0.00014534879301209003, 8.4510516899172217e-05, 0.00015844953304622322, 0.00010663272405508906, 0.00015255437756422907, 7.891425775596872e-05, 0.00013003531785216182, 3.1573581509292126e-05, 6.5463973442092538e-05, 0.00013747173943556845, 0.00012497052375692874, 0.00012354397040326148, 0.00012876323307864368, 6.351793126668781e-05, 0.00021054541866760701, 3.0455010346486233e-05, 6.0296104493318126e-05, 0.00016806779603939503, 9.5990202680695802e-05, 9.6981922979466617e-05, 0.00011145915050292388, 0.00015178915055003017, 0.00010228559403913096, 8.1977028457913548e-05, 9.2688635049853474e-05, 3.3034233638318256e-05, 0.0001749782677507028, 0.00011506836017360911, 2.8868698791484348e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-92,97,70,53,-34,106,-65,59,-89,-80,47,51,-42,-72,-89,100,77,49,78,67,-73,-83,50,-33,-40,-64,-64,-67,62,-63,-113,-12,40,68,64,-66,52,-50,-23,49,-73,58,62,-93,11,76,-34, 82,-96,127,86,-77,-68,-57,-85,97,-102,-63,73,79,-108,-95,91,-39,95,82,127,85,-114,53,71,-52,-77,-69,-80,55,80,-30,-127,-85,78,80,84,-82,82,-82,-17,75,-94,83,90,-73,-127,94,-103, 34,-46,69,38,18,-41,-48,-39,43,-31,5,34,29,-78,-55,-1,-54,36,35,69,33,-54,32,26,-28,-45,-44,-23,31,31,88,-89,-83,43,34,34,-30,39,-37,-11,39,-40,35,43,-6,-9,37,-72, 
  /* [0][1][][] */ 92,-112,-41,94,56,-82,127,-89,87,-113,-71,82,84,-110,-13,-127,127,107,74,-39,84,108,-127,73,74,-75,-94,-98,-127,86,-70,-9,-88,70,106,96,-85,79,-80,89,84,-101,87,91,-89,106,94,-90, 127,-127,-65,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-22,97,-65,127,127,-51,127,127,69,127,127,-127,-127,-127,54,127,-29,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 64,-78,-34,66,37,-62,-49,-62,56,-42,-60,57,48,-53,-17,10,-63,50,58,-30,56,65,51,64,66,-64,-62,-45,36,55,127,15,-61,68,48,49,-49,60,-59,56,60,-58,53,62,-62,-67,59,-56, 
  /* [0][2][][] */ 44,-50,-46,49,27,-52,63,-42,40,-72,-4,39,55,-71,83,-79,73,50,34,-31,26,-10,-77,30,-24,-43,-48,-47,-75,31,-41,90,-73,36,48,42,-27,36,-42,-88,48,-50,40,45,-23,15,39,-74, 72,-74,-48,80,-57,-63,-73,-67,51,-77,-66,60,74,-46,127,32,-46,59,61,-44,55,-18,42,66,-50,-66,-78,-60,32,61,-24,117,-55,65,58,58,-50,61,-65,-107,69,-67,60,62,-85,49,62,-53, 41,-40,-26,46,28,-19,-18,-34,14,-25,-52,27,31,5,67,24,-35,21,28,-33,28,0,39,41,-25,-29,-48,-23,33,34,62,66,0,34,15,22,-23,29,-28,-56,28,-32,26,30,-63,9,30,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0033088980708271265, 0.0017641781596466899, 0.0066655520349740982, 0.002175638685002923, 0.0066994060762226582, 0.0029321317560970783, 0.0069288499653339386, 0.0054059787653386593, 0.0029334179125726223, 0.0018022102303802967, 0.0026096252258867025, 0.0037068778183311224, 0.0019555885810405016, 0.0018257955089211464, 0.0071049029938876629, 0.0085166506469249725, 0.008842754177749157, 0.0033139917068183422, 0.004424526821821928, 0.006177323404699564, 0.0035916969645768404, 0.0067341048270463943, 0.004531890619546175, 0.0064835608936846256, 0.0033538560383021832, 0.0055265007540583611, 0.0013418771559372544, 0.0027822188567370176, 0.0058425487950444221, 0.0053112469613552094, 0.0052506187930703163, 0.0054724370129406452, 0.0026995120570063591, 0.0089481798931956291, 0.0012943379115313292, 0.0025625843554735184, 0.0071428813971579075, 0.0040795835666358471, 0.0041217315010726452, 0.0047370139509439468, 0.0064510386437177658, 0.0043471376411616802, 0.0034840235020965338, 0.0039392667822539806, 0.0014039549278095365, 0.0074365762993693352, 0.0048904051072895527, 0.0012269197031855583, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 601, 768, 2312, 464, 8986, 17461, 2201, -66, -768, -500, 1250, 961, 2993, 1268, 22501, 2626, 1905, -976, -201, 3336, -1732, 9676, 9253, 10829, 4965, 377, 3936, 4278, 8586, -463, 9273, 5581, 612, -226, 4213, 2999, -1775, 310, -691, 5089, 1037, -656, -762, 39, 1003, 3409, 786, 987, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00038688044878654182, 0.00092912430409342051, 0.0002457972732372582, 0.00032000205828808248, 0.00024272873997688293, 0.00023023107496555895, 0.00050808617379516363, 0.00026028836145997047, 0.00040029591764323413, 0.00083898752927780151, 0.00081409775884822011, 0.00030349224107339978, 0.00042422499973326921, 0.00060279062017798424, 0.0001596402726136148, 0.00047814095159992576, 0.00025495688896626234, 0.00039691649726592004, 0.00026227138005197048, 0.00027454664814285934, 0.00034229716402478516, 0.00026413713931106031, 0.0003981416521128267, 0.00014569869381375611, 0.00032391789136454463, 0.00026038548094220459, 0.0017708893865346909, 0.00043417062261141837, 0.00020155195670668036, 0.0004722416924778372, 0.00028112274594604969, 0.00021490825747605413, 0.00062418531160801649, 0.00023495270579587668, 0.00087780755711719394, 0.00060403259703889489, 0.00077514478471130133, 0.00035910133738070726, 0.00024950093938969076, 0.00036838717642240226, 0.00015695058391429484, 0.00022091300343163311, 0.00036474023363552988, 0.00026305860956199467, 0.0019324490567669272, 0.00040909627568908036, 0.0002919330436270684, 0.0011795655591413379, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,2,-6,71,-33,44,23,-27, 
  /* [1][0][][] */ 28,67,39,21,18,-40,105,127, 
  /* [2][0][][] */ -39,-5,4,4,-127,-8,12,4, 
  /* [3][0][][] */ 97,-3,-11,-127,-127,22,30,-14, 
  /* [4][0][][] */ -127,46,-20,-11,73,-12,49,26, 
  /* [5][0][][] */ -105,-27,24,-6,-127,5,9,89, 
  /* [6][0][][] */ -18,-127,23,-15,14,0,0,37, 
  /* [7][0][][] */ -61,-5,6,96,127,-34,-33,4, 
  /* [8][0][][] */ 73,5,4,-127,4,-27,-48,-31, 
  /* [9][0][][] */ -6,-127,-12,-1,2,87,-51,89, 
  /* [10][0][][] */ -96,-9,-4,20,-127,75,62,-15, 
  /* [11][0][][] */ 119,8,40,12,-64,-47,-34,-127, 
  /* [12][0][][] */ 0,14,42,-10,14,-77,127,65, 
  /* [13][0][][] */ 72,-30,-6,-11,127,122,126,-43, 
  /* [14][0][][] */ 127,63,-5,22,-90,-24,-23,-26, 
  /* [15][0][][] */ -15,-127,16,-16,7,5,5,35, 
  /* [16][0][][] */ -46,-10,3,-5,-127,-5,11,-1, 
  /* [17][0][][] */ -31,109,-119,2,7,-127,109,-92, 
  /* [18][0][][] */ 127,-26,-42,16,-63,30,9,102, 
  /* [19][0][][] */ 127,-60,-30,-11,47,7,28,16, 
  /* [20][0][][] */ 127,29,-17,118,-2,41,-3,-63, 
  /* [21][0][][] */ 12,36,-63,6,-17,84,-127,-79, 
  /* [22][0][][] */ -127,24,29,-5,-35,4,-57,-26, 
  /* [23][0][][] */ -41,-53,2,20,-127,65,72,-19, 
  /* [24][0][][] */ 127,-10,-15,-8,-83,-8,-2,10, 
  /* [25][0][][] */ 24,-14,2,-27,127,57,53,-38, 
  /* [26][0][][] */ 3,-90,10,-39,6,-127,80,-54, 
  /* [27][0][][] */ -15,-127,25,-13,-1,-56,31,-7, 
  /* [28][0][][] */ -102,37,-29,13,-17,-28,127,103, 
  /* [29][0][][] */ -11,47,14,5,2,45,-98,-127, 
  /* [30][0][][] */ 127,-29,5,14,-89,9,-51,-27, 
  /* [31][0][][] */ -8,-24,60,-24,19,-123,127,74, 
  /* [32][0][][] */ -72,30,11,6,-127,-104,-105,46, 
  /* [33][0][][] */ -23,13,3,23,-127,-58,-44,16, 
  /* [34][0][][] */ 12,-127,48,-7,-9,86,-73,60, 
  /* [35][0][][] */ -23,-53,-127,-9,0,-72,47,-52, 
  /* [36][0][][] */ 3,127,63,8,-15,14,-20,-44, 
  /* [37][0][][] */ -127,37,36,-14,58,-35,-9,-111, 
  /* [38][0][][] */ -127,-11,-47,-13,34,22,30,104, 
  /* [39][0][][] */ -5,-45,71,-11,15,-87,127,105, 
  /* [40][0][][] */ -27,-20,-7,-39,-127,107,116,-32, 
  /* [41][0][][] */ -127,51,9,-72,-95,-96,-97,46, 
  /* [42][0][][] */ -40,-126,-107,-1,-5,73,-127,-86, 
  /* [43][0][][] */ -72,9,-18,-127,107,67,66,1, 
  /* [44][0][][] */ 127,-10,11,-95,28,-33,-12,44, 
  /* [45][0][][] */ -19,-127,-9,-11,-7,-73,79,10, 
  /* [46][0][][] */ 101,-7,-7,-21,127,-37,-27,7, 
  /* [47][0][][] */ 127,1,-8,112,-11,23,13,-44, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00072300451574847102, 0.0017363531515002251, 0.00045934744412079453, 0.00059802178293466568, 0.00045361294178292155, 0.00043025723425671458, 0.00094951456412672997, 0.00048642847104929388, 0.00074807542841881514, 0.0015679049538448453, 0.001521390862762928, 0.00056716817198321223, 0.00079279427882283926, 0.0011264987988397479, 0.0002983367012348026, 0.00089355272939428687, 0.00047646497841924429, 0.00074175995541736484, 0.00049013434909284115, 0.00051307445392012596, 0.00063968700123950839, 0.00049362110439687967, 0.00074404955375939608, 0.00027228260296396911, 0.00060533970827236772, 0.00048660999163985252, 0.0033094489481300116, 0.00081138068344444036, 0.00037666151183657348, 0.00088252814020961523, 0.00052536389557644725, 0.00040162185905501246, 0.0011664812918752432, 0.00043908104998990893, 0.0016404520720243454, 0.0011288197711110115, 0.0014485953142866492, 0.00067109079100191593, 0.00046626885887235403, 0.00068844418274238706, 0.00029331020778045058, 0.00041284356848336756, 0.00068162876414135098, 0.00049160554772242904, 0.0036113725509494543, 0.00076452159555628896, 0.00054556626128032804, 0.0022043792996555567, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -42748, 23961, -13367, -12879, 20687, -2543, 33183, 44422, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00045521289575845003, 0.00069216854171827435, 0.0015290527371689677, 0.0016546738334000111, 0.00078069523442536592, 0.00060790096176788211, 0.00065933697624132037, 0.001055163680575788, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -61,-10,-35,20,7,-23,-2,4,-122,127,-39,118,126,8,81,-17,-9,-32,8,6,-2,-7,-19,-40,23,-105,8,68,-11,14,20,-38,-2,-86,113,14,-3,-3,-2,-14,127,-9,53,-27,-34,27,-23,-16, 
  /* [1][0][][] */ -3,33,127,4,-5,-20,2,-77,28,-1,22,5,-20,5,-9,-110,8,-52,9,7,-24,34,22,-37,-19,-7,10,-1,13,-8,10,3,-4,14,16,12,-15,-34,59,-53,14,36,-12,24,-12,9,23,-2, 
  /* [2][0][][] */ 4,-51,15,-45,33,27,-4,-27,5,1,-3,13,-8,57,3,1,-39,127,-27,-35,-18,24,-41,-9,122,1,-2,-6,-29,-9,1,-40,-8,-13,1,11,-10,-4,-16,9,14,-21,-19,-3,2,25,-27,-42, 
  /* [3][0][][] */ 4,-88,-1,6,3,-5,-11,-2,-8,-12,15,20,15,-7,48,4,-11,-24,2,25,-8,19,-24,3,8,52,0,6,-6,4,127,2,13,8,-6,0,-22,-16,-9,14,-10,6,-10,28,-5,0,0,32, 
  /* [4][0][][] */ -101,7,-2,-1,1,-37,1,6,43,-41,25,-20,-35,1,-11,-11,2,7,2,25,13,-26,17,-1,-6,47,5,106,1,0,-6,-28,-3,-127,-32,8,0,-6,4,3,-46,-4,-11,18,-57,0,5,6, 
  /* [5][0][][] */ -21,24,21,8,-50,10,1,50,22,2,16,2,-1,-43,3,38,-5,-88,20,4,42,-41,6,41,11,9,-80,-41,-40,-34,16,-2,-4,-70,2,-63,70,11,-48,16,23,-49,1,5,127,-10,-45,-6, 
  /* [6][0][][] */ -31,-23,-14,-5,38,-26,-2,-31,-10,-6,33,-17,-16,40,0,-64,2,4,-1,-25,-35,48,-6,-79,1,-11,-57,-67,26,46,-13,5,5,-54,-19,61,-71,-48,12,-59,-14,12,16,41,127,-30,43,12, 
  /* [7][0][][] */ 14,33,-75,27,-23,15,6,57,-6,-6,63,-32,11,-30,-7,-7,-17,-127,39,-41,59,41,16,-58,19,-22,24,2,-18,29,-13,5,1,37,-1,-25,-8,-52,-42,-65,-17,-28,40,60,-29,-21,-6,2, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019346548244357109, 0.029417162761092186, 0.064984738826751709, 0.070323638617992401, 0.033179547637701035, 0.025835791602730751, 0.02802182175219059, 0.044844456017017365, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52058, -294, 7887, 62, 5469, -6986, 1270, 21836, 1368, 27863, -2234, 18773, -6143, -831, 24849, 3259, 453, 13987, 34955, 11559, 137, -320, -388, 10842, -8169, 21152, 45984, 37950, 3293, 191, -1442, 1398, 816, 18726, -6817, 15906, -10356, 20590, -22356, 117065, 18135, 21726, 9699, -1679, 16908, 3330, 1108, 367, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00035749320522882044, 0.00030572546529583633, 0.00019671831978484988, 0.00033709715353325009, 0.0001549100416013971, 9.2873044195584953e-05, 0.00093567458679899573, 0.00015866532339714468, 0.00015392425120808184, 0.0001731196534819901, 0.00010542389645706862, 0.00022904860088601708, 0.00030722175142727792, 0.00031928412499837577, 0.00010049105185316876, 0.00046567831304855645, 0.00027722134836949408, 0.00029509048908948898, 7.003767677815631e-05, 0.00016657116066198796, 0.00024345576821360737, 0.00021342749823816121, 0.00024215711164288223, 0.00019671257177833468, 0.00015143708151299506, 0.00017889303853735328, 0.00059164391132071614, 8.811049337964505e-05, 0.00021028943592682481, 0.0039738696068525314, 9.1657282609958202e-05, 0.00015374444774352014, 0.0010284562595188618, 0.00015653025184292346, 0.00020136241801083088, 0.00015798120875842869, 0.00042402459075674415, 0.0001265539467567578, 0.00028107495745643973, 2.1488593120011501e-05, 0.00017797319742385298, 6.0035290516680107e-05, 0.0001661852584220469, 0.00017105051665566862, 0.00014337852189783007, 0.00012147705274401233, 0.00026659350260160863, 0.00012171462731203064, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,20,109,4,82,-1,28,15,8,9,7,-8,-9,-45,9,-2,8,-23,-113,-7,-23,127,-10,-2,6,-5,8,-5,5,15,99,20,28,38,-28,1,34,-2,1,18,-68,-8,-8,16,2,-7,-10, 127,10,15,-127,28,87,11,11,123,127,7,43,-50,-24,5,8,127,-56,-59,-55,-101,24,-108,15,17,70,-31,-84,23,21,10,-125,6,-62,127,9,-40,-47,-6,115,-79,-98,-29,3,-35,-9,-127,23, -31,-3,7,15,0,65,4,18,27,8,-14,31,-14,-3,16,4,-103,29,-3,78,-31,-12,-17,-6,-4,-59,-3,28,-17,5,4,-23,8,-24,16,-19,-1,47,41,-13,50,39,-15,11,-43,3,-1,-6, 
  /* [0][1][][] */ 126,7,1,-98,14,-26,35,-16,9,9,-12,53,-7,-1,18,-32,0,-49,-60,-86,10,-73,-123,-18,5,98,-15,-127,-9,33,11,-109,17,-53,-3,127,-3,59,-41,40,-62,-127,39,-88,-44,-14,-12,-5, 27,-127,-127,115,-127,-127,-127,-127,-127,-97,127,-127,127,127,35,-127,-82,127,127,-106,127,127,112,127,127,-127,-127,28,-127,-127,94,127,-127,127,-29,-42,127,-127,127,127,127,-80,127,127,127,-122,102,107, 54,5,48,-14,6,-61,44,18,-24,14,-105,-8,0,-40,127,5,63,-65,-71,85,14,-45,12,-33,2,6,-38,68,20,40,0,3,32,-45,8,66,-5,64,68,-10,-81,9,-84,-31,27,-17,-10,6, 
  /* [0][2][][] */ -53,-7,26,-17,7,35,-37,22,8,-24,12,32,6,-6,-38,18,5,22,-14,105,6,-31,-15,-12,-3,22,0,50,-10,3,47,-32,-18,-44,-32,-39,-1,31,9,-22,9,-5,42,-37,-36,18,-10,17, 68,126,75,21,17,-20,123,35,18,-3,43,26,-5,-1,-90,25,-58,-56,-36,121,-37,49,12,19,32,-63,-40,29,76,1,127,22,86,-27,7,-36,-25,-17,-12,118,-27,-12,-40,45,20,-32,8,-127, -42,-4,6,-4,5,-5,-61,8,-18,-10,-40,-40,19,-9,-9,12,33,24,-8,-127,23,-9,5,-9,-6,10,-11,-54,-15,8,6,9,-20,87,-37,-22,-5,36,25,-61,5,9,-38,7,-43,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.015193460509181023, 0.012993331998586655, 0.0083605283871293068, 0.014326629228889942, 0.0065836766734719276, 0.0039471043273806572, 0.039766170084476471, 0.0067432760260999203, 0.006541780661791563, 0.0073575852438807487, 0.0044805156067013741, 0.0097345653921365738, 0.013056924566626549, 0.013569574803113937, 0.0042708697728812695, 0.01979132741689682, 0.011781906709074974, 0.012541345320641994, 0.0029766012448817492, 0.0070792743936181068, 0.010346869938075542, 0.0090706683695316315, 0.010291676968336105, 0.0083602843806147575, 0.0064360760152339935, 0.0076029538176953793, 0.025144865736365318, 0.0037446958012878895, 0.0089373011142015457, 0.16888944804668427, 0.0038954343181103468, 0.0065341386944055557, 0.043709389865398407, 0.006652535405009985, 0.0085579026490449905, 0.006714201532304287, 0.018021045252680779, 0.0053785429336130619, 0.011945685371756554, 0.000913265161216259, 0.0075638606213033199, 0.0025514997541904449, 0.007062873337417841, 0.0072696465067565441, 0.0060935872606933117, 0.0051627745851874352, 0.011330223642289639, 0.0051728715188801289, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 51631, 7259, 6700, 7800, 1494, 10984, -2081, -229, 830, 2178, 3128, 302, 1682, -935, 724, -2086, 5489, 12580, -253, 26795, 3919, 2858, 7712, -487, 3490, 4989, 27386, 10435, -61, -2607, 143, 2424, -2163, 9966, 2933, 6023, 7447, 4497, 19907, 1674, -899, 2542, 1121, 3567, 5012, 2221, -1293, 2650, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 8.3259772509336472e-05, 0.00031181692611426115, 0.0002309758128831163, 0.00041299467557109892, 0.0015051269438117743, 0.00045944363228045404, 0.00092801923165097833, 0.0011730673722922802, 0.00067245942773297429, 0.0006383368163369596, 0.00072159728733822703, 0.00049886613851413131, 0.00057042267872020602, 0.00049033557297661901, 0.00061571283731609583, 0.0017526247538626194, 0.0002944001171272248, 0.00033757966593839228, 0.0019923860672861338, 0.00010069861309602857, 0.00031209745793603361, 0.00034610161674208939, 0.00051351240836083889, 0.0010354737751185894, 0.00034891121322289109, 0.0002365235413890332, 0.00014773238217458129, 0.00035031369770877063, 0.00090507417917251587, 0.0010011674603447318, 0.00054356380132958293, 0.00034886223147623241, 0.00091941101709380746, 0.00022149186406750232, 0.00036251606070436537, 0.00030686816899105906, 0.00049349019536748528, 0.00030249377596192062, 0.0001172555421362631, 0.0027171876281499863, 0.00064886175096035004, 0.0010853526182472706, 0.00045113428495824337, 0.00041897656046785414, 0.00023743353085592389, 0.00049725745338946581, 0.00088709342526271939, 0.0010063169756904244, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 74,23,4,-14,127,23,-42,-16, 
  /* [1][0][][] */ -4,-3,3,127,11,-4,9,14, 
  /* [2][0][][] */ 27,-127,-18,39,-4,-66,74,13, 
  /* [3][0][][] */ 127,-33,-8,14,-16,-34,30,8, 
  /* [4][0][][] */ 10,-44,127,-8,-17,-49,8,-94, 
  /* [5][0][][] */ 69,0,3,-3,127,17,-6,1, 
  /* [6][0][][] */ -13,92,-15,127,29,51,-75,-54, 
  /* [7][0][][] */ -7,127,-2,3,-3,-13,16,-3, 
  /* [8][0][][] */ 127,51,-8,5,-44,-20,-2,-38, 
  /* [9][0][][] */ -127,9,9,18,48,9,-3,6, 
  /* [10][0][][] */ -74,-10,11,127,36,27,-17,-4, 
  /* [11][0][][] */ -127,3,8,-66,27,5,-21,-45, 
  /* [12][0][][] */ 127,26,1,17,-53,-12,0,-48, 
  /* [13][0][][] */ -9,87,-127,-7,-1,113,-78,73, 
  /* [14][0][][] */ -44,-21,-15,127,16,14,-5,-28, 
  /* [15][0][][] */ -4,127,2,-4,-2,-14,11,-54, 
  /* [16][0][][] */ -17,-127,-20,9,-7,-118,122,-27, 
  /* [17][0][][] */ 17,127,1,-11,8,83,-86,-21, 
  /* [18][0][][] */ -10,46,-127,-1,8,53,-36,62, 
  /* [19][0][][] */ -67,17,5,6,-127,6,21,22, 
  /* [20][0][][] */ -127,-14,-1,2,67,-30,33,-4, 
  /* [21][0][][] */ -58,-4,1,1,-127,1,15,0, 
  /* [22][0][][] */ -127,-22,1,2,75,-13,32,49, 
  /* [23][0][][] */ -20,-24,-12,-8,-3,82,-127,-92, 
  /* [24][0][][] */ -6,39,-127,5,6,46,-17,73, 
  /* [25][0][][] */ 100,-42,-6,127,-70,-15,6,-45, 
  /* [26][0][][] */ 5,-21,-5,1,-13,123,127,-28, 
  /* [27][0][][] */ 64,-3,1,15,127,30,32,-22, 
  /* [28][0][][] */ 1,121,-72,2,0,73,-26,127, 
  /* [29][0][][] */ -13,17,-2,-13,-1,81,-127,-87, 
  /* [30][0][][] */ 6,-5,-2,-127,-6,3,-5,-15, 
  /* [31][0][][] */ -70,5,7,0,-127,7,13,0, 
  /* [32][0][][] */ -7,32,10,-127,-5,37,-91,-104, 
  /* [33][0][][] */ -58,-5,-1,4,-127,39,41,-1, 
  /* [34][0][][] */ -127,69,10,25,31,-19,13,9, 
  /* [35][0][][] */ -9,127,-18,-2,14,-100,66,-31, 
  /* [36][0][][] */ 0,46,2,-27,1,104,-127,-26, 
  /* [37][0][][] */ 38,-65,-13,25,21,-127,125,-22, 
  /* [38][0][][] */ 17,-127,5,3,19,51,-44,69, 
  /* [39][0][][] */ 6,-127,-16,-6,-1,-8,-52,-100, 
  /* [40][0][][] */ 113,44,9,-14,-44,74,-127,-97, 
  /* [41][0][][] */ 16,-126,13,2,-8,87,-62,127, 
  /* [42][0][][] */ 45,-3,4,-127,-51,1,-5,-35, 
  /* [43][0][][] */ -89,-28,15,-127,54,6,-9,-5, 
  /* [44][0][][] */ -5,-25,0,15,-35,107,127,-13, 
  /* [45][0][][] */ -127,-46,1,-1,19,18,24,-13, 
  /* [46][0][][] */ 17,71,127,-1,-3,13,19,24, 
  /* [47][0][][] */ 2,5,6,127,12,2,5,-2, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00020244989718776196, 0.00075819698395207524, 0.00056162814144045115, 0.001004215213470161, 0.0036597843281924725, 0.0011171579826623201, 0.0022565207909792662, 0.0028523663058876991, 0.0016351154772564769, 0.0015521448804065585, 0.0017545964801684022, 0.0012130156392231584, 0.0013870085822418332, 0.0011922731064260006, 0.0014971336349844933, 0.0042615863494575024, 0.00071584718534722924, 0.00082084024325013161, 0.0048445770516991615, 0.00024485323228873312, 0.00075887906132265925, 0.00084156176308169961, 0.0012486285995692015, 0.0025178012438118458, 0.00084839342162013054, 0.0005751177086494863, 0.00035921798553317785, 0.00085180357564240694, 0.0022007287479937077, 0.0024343838449567556, 0.0013216999359428883, 0.00084827427053824067, 0.0022355895489454269, 0.00053856748854741454, 0.00088147417409345508, 0.00074616383062675595, 0.0011999437119811773, 0.0007355273119173944, 0.00028511215350590646, 0.0066069643944501877, 0.0015777366934344172, 0.0026390838902443647, 0.0010969534050673246, 0.0010187604930251837, 0.00057733035646378994, 0.0012091039679944515, 0.002157007809728384, 0.0024469052441418171, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -5088, -24133, 23972, 21150, 4916, 749, 38366, 11191, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0014441623352468014, 0.00076463993173092604, 0.0011160236317664385, 0.0012893846724182367, 0.0011643092148005962, 0.001307828351855278, 0.00093126116553321481, 0.00068822165485471487, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -11,-2,10,-91,10,28,8,5,4,5,1,-4,100,0,1,7,0,-9,-5,1,78,-4,-2,4,30,38,11,13,5,6,4,-127,10,7,-1,2,-29,3,-15,34,9,-26,-7,3,4,-2,4,4, 
  /* [1][0][][] */ -38,-6,-3,-4,41,27,-29,76,21,6,-29,-20,11,0,16,34,0,38,16,-44,-2,21,127,18,-26,-4,51,2,22,-4,16,-12,15,-9,-8,-21,6,-54,8,3,-6,-7,-80,-9,-34,7,-51,-94, 
  /* [2][0][][] */ -59,17,-2,10,41,-8,26,27,-11,56,8,-6,1,0,6,50,0,13,-127,23,-2,13,7,-17,-31,-1,38,5,9,29,20,2,6,-6,-12,-14,13,3,5,2,36,-6,-32,-1,21,-54,22,12, 
  /* [3][0][][] */ 3,2,0,7,-5,26,0,-3,65,20,-3,-3,25,0,-31,-6,0,1,-7,1,-4,1,6,-20,-13,-4,-9,-1,-10,-2,0,-10,-47,47,-56,-4,7,0,3,-127,0,2,0,-54,-3,-1,-2,5, 
  /* [4][0][][] */ -2,-5,80,37,5,-21,1,-2,5,-3,-4,-11,-84,0,-13,4,0,9,8,0,67,4,-1,-7,-14,29,-7,45,-8,0,2,103,5,3,1,-1,14,-11,-13,-18,-5,-127,5,2,-2,-5,2,2, 
  /* [5][0][][] */ -7,44,2,-9,2,48,24,10,-20,28,9,54,24,0,-127,-2,0,11,-39,21,-11,8,-12,41,-19,-4,28,-4,-11,21,22,-19,50,31,-40,-6,4,18,-46,15,26,-11,-12,26,21,61,21,22, 
  /* [6][0][][] */ -22,-55,1,7,40,-49,-19,8,25,-26,-14,90,-3,0,-127,42,0,-10,50,-19,-7,1,25,-35,29,0,-4,-13,48,-13,-10,-3,92,-33,28,0,-3,-11,-69,-21,-12,-15,-2,-28,-19,-85,-17,-25, 
  /* [7][0][][] */ -116,-23,-15,8,127,19,66,27,15,5,26,-34,-27,0,86,104,0,12,3,62,-13,-3,-30,43,19,4,44,4,50,60,57,-7,-9,-15,-20,-22,3,21,25,34,75,5,-26,-12,61,0,64,79, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.061376899480819702, 0.032497197389602661, 0.047431003302335739, 0.054798845201730728, 0.04948313906788826, 0.055582702159881592, 0.039578597992658615, 0.029249420389533043, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 65578, 57613, 61814, 42996, -264, 14030, 2761, 30025, 22448, 27602, 27986, -3173, -46701, -127, 48705, 405, -204, 42447, 2767, 1823, -15837, -2498, 49569, 39889, -22508, 41702, 46923, 23631, -2681, 14701, -8065, -51014, 12693, 113891, 24946, 1727, 61290, -465, 163295, -27197, 14960, -26064, 3258, 110065, -1781, 73993, 1054, -23060, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.1039546532556415e-05, 6.8495588493533432e-05, 0.00014045641000848264, 0.0001167793307104148, 0.00020762723579537123, 0.00018254089809488505, 0.00013949847198091447, 5.6183645938290283e-05, 0.00010093381570186466, 3.074131382163614e-05, 6.1973471019882709e-05, 2.419195334368851e-05, 0.00018515544070396572, 0.005541567225009203, 5.3436018788488582e-05, 0.00024606080842204392, 0.0027484172023832798, 1.42808248710935e-05, 7.8525881690438837e-05, 0.00016430133837275207, 0.00011239475134061649, 9.6915522590279579e-05, 0.0001177353915409185, 3.3031225029844791e-05, 9.7291951533406973e-05, 6.9179528509266675e-05, 2.7434211006038822e-05, 4.4598171371035278e-05, 0.00027176231378689408, 5.6197139201685786e-05, 5.2876734116580337e-05, 0.00021601545449811965, 0.00019305406021885574, 8.6269037637975998e-06, 9.8933116532862186e-05, 0.00019454958965070546, 1.4398770872503519e-05, 0.0004015208687633276, 2.9440143407555297e-05, 9.3388523964677006e-05, 7.1728427428752184e-05, 0.00016720157873351127, 0.00010455676238052547, 8.9468576334184036e-06, 0.00019694851653184742, 8.1188954936806113e-05, 0.00022215262288227677, 9.9008982942905277e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-22,-7,-16,8,-40,-79,-68,-27,-49,8,65,34,-71,114,-43,-113,-84,36,-6,-2,-71,-111,-79,-34,-124,-63,-20,70,15,95,27,-127,-89,-7,55,19,48,-127,78,-77,-14,105,-107,-2,-34,-87,108, 76,11,-28,-29,58,-127,-127,-81,60,-76,-115,108,37,-82,-1,62,-52,-112,59,7,10,-111,-127,-70,-4,-127,-120,-39,-54,21,-56,54,29,-127,64,85,13,73,-92,127,-127,6,124,-127,2,-22,-127,95, -32,42,7,-5,-64,-108,-58,-17,87,-8,-127,38,9,-71,-101,-11,-127,-24,27,12,-16,-75,-35,-23,-11,-30,-57,-11,-10,18,-24,9,107,-87,70,32,14,36,-5,16,-79,3,7,-78,-17,5,-55,15, 
  /* [0][1][][] */ -85,-127,-44,-43,-9,54,99,-105,-27,-108,-21,113,90,-64,27,-96,-121,-94,89,-77,42,-87,-103,-127,42,-117,-78,-39,127,-60,127,84,-43,-85,-14,84,-35,-76,-107,90,42,59,104,-107,-91,-117,82,120, 127,-84,-127,-127,127,40,94,-127,101,-127,-111,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-120,-118,127,-97,-127,-127,-119,-127,-70,127,28,-112,127,127,-68,-127,-96,90,61,127,127,-117,-112,-127,125,127, -52,31,-62,-85,-119,-23,31,-37,127,-20,-77,36,56,-70,-26,-43,-37,-29,54,-71,57,-82,-39,-24,47,-4,-45,-61,15,-89,-36,20,30,-99,118,23,-36,-62,2,-15,37,53,10,-74,-57,-37,65,36, 
  /* [0][2][][] */ -61,-107,-33,-34,0,34,-5,-34,-38,-59,-16,60,76,-127,-127,-64,-43,-18,64,75,52,-33,-12,-60,33,-53,-10,-58,76,28,77,63,108,-27,-37,-9,-95,35,-18,31,9,37,14,-55,96,-77,4,31, 87,-74,-88,-85,82,18,7,-47,48,-70,-33,55,82,-26,16,93,-24,-31,77,117,82,-52,-18,-57,94,-65,-17,-99,-50,39,-45,111,-18,-48,67,7,-127,50,-15,-1,11,32,15,-65,127,-100,-12,41, -28,29,-42,-36,-79,-18,22,-11,59,-4,-14,32,31,-43,111,-29,-93,-4,30,59,74,-28,-1,-3,42,3,-3,-63,-13,28,-20,39,-90,-43,65,4,-20,21,27,-39,7,35,-6,-14,63,-35,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0038691805675625801, 0.0029110624454915524, 0.0059693972580134869, 0.0049631213769316673, 0.0088241575285792351, 0.0077579882927238941, 0.0059286849573254585, 0.0023878049105405807, 0.0042896871455013752, 0.0013065057573840022, 0.0026338724419474602, 0.0010281580034643412, 0.0078691057860851288, 0.23551659286022186, 0.0022710307966917753, 0.010457583703100681, 0.1168077290058136, 0.00060693506384268403, 0.0033373499754816294, 0.0069828066043555737, 0.0047767767682671547, 0.0041189095936715603, 0.005003754049539566, 0.0014038269873708487, 0.004134907852858305, 0.0029401299543678761, 0.0011659539304673672, 0.001895422232337296, 0.011549897491931915, 0.0023883783724159002, 0.0022472611162811518, 0.0091806566342711449, 0.0082047972828149796, 0.00036664339131675661, 0.004204657394438982, 0.0082683572545647621, 0.0006119477329775691, 0.017064636573195457, 0.0012512060347944498, 0.0039690122939646244, 0.0030484581366181374, 0.0071060666814446449, 0.004443662241101265, 0.00038024145760573447, 0.0083703119307756424, 0.003450530581176281, 0.0094414865598082542, 0.0042078816331923008, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4003, 63, 10577, 6716, 6463, 7277, 8810, -28, 23, -346, 2502, 471, 13567, -85115160, 3231, 16568, -68709368, -115, -527, 10754, 4417, -19, -62, 487, 3957, -883, 79, 764, 4340, 1903, 2577, 15425, 4256, 285, 292, -1880, 355, 4096, -155, 10413, 2433, 13319, -288, -79, 13783, 226, 8719, 5112, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00052190769929438829, 0.00055721262469887733, 0.00029742682818323374, 0.00028047410887666047, 0.00030663565848954022, 0.00028422471950761974, 0.00043198338244110346, 0.0013613373739644885, 0.00047902914229780436, 0.0021631699055433273, 0.0005899010575376451, 0.0018048543715849519, 0.00016270624473690987, 1.905461566309441e-09, 0.00081501028034836054, 0.00019905689987353981, 1.905461566309441e-09, 0.0062331082299351692, 0.00039229707908816636, 0.00035991781624034047, 0.00024720540386624634, 0.004214421845972538, 0.00030811358010396361, 0.0013426982332020998, 0.00095467409119009972, 0.00061659491620957851, 0.0021021028514951468, 0.0016276249662041664, 0.00025956454919651151, 0.0015465960605069995, 0.0011479919776320457, 0.00015186397649813443, 0.0001814126007957384, 0.011411597020924091, 0.00053835613653063774, 0.0006352183991111815, 0.0042921868152916431, 0.00031250686151906848, 0.002377860713750124, 0.00033461180282756686, 0.0011643070029094815, 0.00016475783195346594, 0.00062037300085648894, 0.010809388943016529, 0.00036477690446190536, 0.00048083844012580812, 0.00032203842420130968, 0.00017454176850151271, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 15,-127,52,-47,28,-16,-50,19, 
  /* [1][0][][] */ 64,60,-23,-97,7,-10,-75,127, 
  /* [2][0][][] */ 34,8,-42,127,50,127,48,93, 
  /* [3][0][][] */ 83,72,-83,127,-98,-7,-6,13, 
  /* [4][0][][] */ -39,-101,72,14,9,26,-45,-127, 
  /* [5][0][][] */ 23,7,-34,45,7,-36,37,127, 
  /* [6][0][][] */ 66,-13,-127,-94,119,9,57,-37, 
  /* [7][0][][] */ 127,15,20,-20,27,-9,82,-56, 
  /* [8][0][][] */ 15,-93,9,100,-2,22,-9,-127, 
  /* [9][0][][] */ 104,-127,17,-2,-15,14,-118,92, 
  /* [10][0][][] */ -127,-36,-116,14,-12,9,-90,50, 
  /* [11][0][][] */ -21,-41,-7,-101,-127,-32,46,-17, 
  /* [12][0][][] */ 18,5,-39,66,-82,-21,64,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -7,-33,-6,14,44,127,45,41, 
  /* [15][0][][] */ 38,4,15,-127,70,39,-56,71, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 19,23,127,20,-28,-13,26,33, 
  /* [18][0][][] */ 85,-127,26,29,-7,19,-118,3, 
  /* [19][0][][] */ -127,-14,34,75,-66,-61,-96,70, 
  /* [20][0][][] */ 32,29,-45,109,-16,-127,-7,63, 
  /* [21][0][][] */ 59,21,127,11,-16,-13,69,14, 
  /* [22][0][][] */ -74,-19,-127,4,2,11,-99,7, 
  /* [23][0][][] */ -105,126,-19,-22,9,-11,127,-79, 
  /* [24][0][][] */ 6,-55,-49,82,-12,-60,99,127, 
  /* [25][0][][] */ 17,42,38,28,127,127,-72,-52, 
  /* [26][0][][] */ -81,-32,-127,-1,8,13,-89,3, 
  /* [27][0][][] */ 4,-25,-30,4,-49,127,69,45, 
  /* [28][0][][] */ 1,-15,-18,38,20,127,54,58, 
  /* [29][0][][] */ 88,26,127,-1,-19,-18,88,-5, 
  /* [30][0][][] */ -76,127,-21,-25,10,-3,99,-47, 
  /* [31][0][][] */ -45,-92,-19,6,36,-73,127,109, 
  /* [32][0][][] */ 6,8,-50,116,-11,98,85,127, 
  /* [33][0][][] */ -1,64,-11,-107,11,-10,-7,127, 
  /* [34][0][][] */ -25,88,-3,-94,28,-10,16,127, 
  /* [35][0][][] */ 127,6,-13,-35,18,31,93,-37, 
  /* [36][0][][] */ -127,-9,21,61,-38,5,-120,80, 
  /* [37][0][][] */ -4,-21,-11,27,34,127,54,52, 
  /* [38][0][][] */ 12,19,5,80,127,-4,-20,36, 
  /* [39][0][][] */ 5,24,37,-127,24,4,-38,120, 
  /* [40][0][][] */ 96,26,127,3,-8,-12,89,-4, 
  /* [41][0][][] */ 1,-31,-34,84,50,127,74,105, 
  /* [42][0][][] */ -80,-7,127,19,-40,15,-27,65, 
  /* [43][0][][] */ -13,-55,5,101,-18,6,18,-127, 
  /* [44][0][][] */ 35,-6,-64,-127,61,-32,-10,-107, 
  /* [45][0][][] */ -83,127,4,-52,7,3,75,-52, 
  /* [46][0][][] */ -127,-19,32,26,-26,27,-88,35, 
  /* [47][0][][] */ 112,23,125,-1,33,-21,127,-18, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0010783501202240586, 0.0011512960772961378, 0.00061453442322090268, 0.00057950726477429271, 0.00063356145983561873, 0.00058725662529468536, 0.00089255115017294884, 0.0028127545956522226, 0.0009897557320073247, 0.0044694771058857441, 0.0012188359396532178, 0.0037291361950337887, 0.00033617878216318786, 3.937008052901092e-09, 0.0016839499585330486, 0.00041128543671220541, 3.937008052901092e-09, 0.012878661975264549, 0.00081055250484496355, 0.00074365147156640887, 0.00051076844101771712, 0.0087077124044299126, 0.00063661509193480015, 0.0027742430102080107, 0.0019725190941244364, 0.0012739900266751647, 0.0043433019891381264, 0.0033629501704126596, 0.00053630454931408167, 0.0031955307349562645, 0.0023719468154013157, 0.00031377680716104805, 0.00037482930929400027, 0.023578301072120667, 0.0011123353615403175, 0.0013124692486599088, 0.0088683879002928734, 0.00064569234382361174, 0.0049130646511912346, 0.00069136492675170302, 0.0024056565016508102, 0.00034041772596538067, 0.001281796139664948, 0.022334037348628044, 0.00075369112892076373, 0.00099349406082183123, 0.00066538620740175247, 0.00036063298466615379, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -591, -43935, -7598, -12792, -32013, -2383, -25023, -26564, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0020817636977881193, 0.0024199129547923803, 0.002397466916590929, 0.0012884213356301188, 0.00097512122010812163, 0.0022002405021339655, 0.0018111452227458358, 0.0011448281584307551, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-20,4,-1,123,0,-3,3,-1,-127,-92,-5,0,121,-3,0, 
  /* [1][0][][] */ 0,-30,1,89,75,12,22,7,-1,-5,127,-45,0,31,-11,0, 
  /* [2][0][][] */ 0,2,-2,-12,-60,4,11,0,0,3,-17,0,0,127,-9,0, 
  /* [3][0][][] */ 0,-13,-19,-127,82,25,69,18,-1,60,-2,42,0,-2,19,0, 
  /* [4][0][][] */ 0,49,-29,38,-57,34,127,9,2,-62,18,-8,0,-6,17,0, 
  /* [5][0][][] */ 0,-18,-12,0,-21,-22,-13,17,0,10,-4,-43,0,-4,127,0, 
  /* [6][0][][] */ 0,15,-2,1,52,-19,-24,-6,2,-104,112,61,0,127,59,0, 
  /* [7][0][][] */ 0,13,-14,127,7,-5,15,9,0,67,-52,73,0,-6,49,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.088474951684474945, 0.10284629464149475, 0.10189233720302582, 0.054757904261350632, 0.041442651301622391, 0.0935102179646492, 0.076973669230937958, 0.048655197024345398, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 14769, 38069, 8282, 9170, 52249, 14250, 23480, -11574, 4899, 27904, 15001, -445, 25174, 11195, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00017682542966213077, 0.0001058607449522242, 0.00042260615737177432, 0.00018620867922436446, 6.364143337123096e-05, 0.00036545711918734014, 0.00016562564997002482, 2.016632970480714e-05, 0.0003564606886357069, 0.00022582497331313789, 0.00080654874909669161, 0.00072724185883998871, 0.00027618766762316227, 0.00018757430370897055, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-126,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,91,-2,-72,67,-95,77,-95,-27,4,-15,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,16,-29,14,-28,0,3,-109,-49,8,-30,-14, -78,-41,-57,-15,-8,-26,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,34,-26,33,-127,6,-2,2,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,69,2,-6,39,-39,52,-76,0,0,4,40,2,-27,23, 23,-4,31,-2,-27,40,-34,20,-125,-13,0,84,-58,0,-29,-111, 21,-7,19,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.007515080738812685, 0.0044990815222263336, 0.017960760742425919, 0.0079138688743114471, 0.0027047607582062483, 0.015531927347183228, 0.0070390896871685982, 0.00085706898244097829, 0.015149579383432865, 0.0095975613221526146, 0.034278322011232376, 0.030907778069376945, 0.011737975291907787, 0.0079719079658389091, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 14995, -76140, 10759, 219357, 18517, 33761, 9077, -209008, 26143, 12985, 244204, -1073741824, 29915, 37046, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00023382605286315084, 0.00024133530678227544, 5.112429425935261e-05, 1.3784473594569135e-05, 0.00025860063033178449, 0.00011479782551759854, 0.00035091917379759252, 4.8560632421867922e-06, 5.8419387642061338e-05, 0.00021252420265227556, 2.3395636162604205e-05, 1.1533876076441629e-09, 0.0001355241984128952, 8.6713422206230462e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 47,-3,30, -4,-21,14, -127,-118,-67, 
  /* [1][1][][] */ 3,-5,0, -21,3,-6, 1,-29,5, 
  /* [1][2][][] */ -2,18,-1, -3,8,-2, 39,-17,12, 
  /* [2][0][][] */ 34,-2,-3, 78,116,3, 40,-40,7, 
  /* [2][1][][] */ 13,14,1, 70,127,-28, 20,-5,-7, 
  /* [2][2][][] */ 50,-64,21, 75,-43,-21, 33,-54,15, 
  /* [3][0][][] */ 2,30,2, 29,90,20, -1,4,-5, 
  /* [3][1][][] */ 19,36,7, 66,127,30, -13,-17,5, 
  /* [3][2][][] */ 4,4,4, 27,28,10, -1,-3,4, 
  /* [4][0][][] */ 42,75,-14, 17,85,-17, -13,11,-7, 
  /* [4][1][][] */ 46,93,51, 32,125,28, 32,53,-20, 
  /* [4][2][][] */ 62,85,37, 52,127,14, -24,22,17, 
  /* [5][0][][] */ 11,4,-122, -1,2,-107, -5,28,-30, 
  /* [5][1][][] */ 10,-37,-127, 5,-39,-110, 3,17,-21, 
  /* [5][2][][] */ 4,14,-15, 8,4,-8, 6,16,-9, 
  /* [6][0][][] */ 26,-62,34, 50,-84,41, 12,-18,10, 
  /* [6][1][][] */ 36,-96,60, 64,-127,70, 8,-28,16, 
  /* [6][2][][] */ 21,-35,12, 15,-44,25, -11,8,-1, 
  /* [7][0][][] */ -30,18,6, -108,-38,2, -24,25,5, 
  /* [7][1][][] */ -15,-10,1, -127,-92,-7, -4,-2,7, 
  /* [7][2][][] */ -25,27,-11, -14,8,-2, -21,26,-3, 
  /* [8][0][][] */ 120,125,113, 117,125,111, 119,127,113, 
  /* [8][1][][] */ 120,124,113, 118,124,111, 120,126,113, 
  /* [8][2][][] */ 110,122,107, 109,122,106, 112,126,107, 
  /* [9][0][][] */ -20,-2,9, -13,-5,0, 2,3,-11, 
  /* [9][1][][] */ 94,115,-8, 73,127,17, -7,19,27, 
  /* [9][2][][] */ -24,-22,17, 5,-29,1, 11,4,-19, 
  /* [10][0][][] */ -24,-83,-18, 34,95,20, -8,-12,-2, 
  /* [10][1][][] */ -59,-103,-13, 79,127,15, -16,-26,0, 
  /* [10][2][][] */ -31,-19,3, 36,23,-10, -8,0,8, 
  /* [11][0][][] */ -3,-14,9, 18,-29,15, 18,-84,-39, 
  /* [11][1][][] */ -34,-30,-9, -22,-48,-24, -4,-45,-40, 
  /* [11][2][][] */ 3,-27,-63, 119,127,69, -26,22,-34, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-98,-18, -62,-112,-26, -9,-18,-6, 
  /* [13][1][][] */ 61,114,15, 57,127,24, 7,15,10, 
  /* [13][2][][] */ -9,-20,2, 1,-19,-2, 0,4,-5, 
  /* [14][0][][] */ 46,-6,-37, 78,-27,-51, 31,-10,-21, 
  /* [14][1][][] */ 89,-16,-75, 127,-40,-90, 58,-19,-38, 
  /* [14][2][][] */ 55,-9,-47, 74,-21,-54, 25,-6,-19, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 5.0711901167233009e-07, 0.090503208339214325, 0.093409687280654907, 0.01978784054517746, 0.0053353295661509037, 0.10009229183197021, 0.044432908296585083, 0.13582451641559601, 0.0018795565702021122, 0.022611431777477264, 0.082258246839046478, 0.0090553639456629753, 4.4642277430284594e-07, 0.052455123513936996, 0.033562738448381424, 4.8125261997711277e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.4839872419834137, } };
const TfArray<1, int> quant46_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.41126111149787903, } };
const TfArray<1, int> quant50_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.43418166041374207, } };
const TfArray<1, int> quant53_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.53510099649429321, } };
const TfArray<1, int> quant54_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,31,31,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.31653386354446411, } };
const TfArray<1, int> quant58_zero = { 1, { 30 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.22679099440574646, } };
const TfArray<1, int> quant61_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.29769289493560791, } };
const TfArray<1, int> quant62_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.21291285753250122, } };
const TfArray<1, int> quant65_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.35437595844268799, } };
const TfArray<1, int> quant66_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,15,15,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.048478789627552032, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,15,15,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.074126496911048889, } };
const TfArray<1, int> quant69_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,15,15,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 57600), (TfLiteIntArray*)&g0::tensor_dimension44, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 57600), (TfLiteIntArray*)&g0::tensor_dimension46, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 178608), (TfLiteIntArray*)&g0::tensor_dimension47, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 178608), (TfLiteIntArray*)&g0::tensor_dimension49, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension50, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 43200), (TfLiteIntArray*)&g0::tensor_dimension51, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 43200), (TfLiteIntArray*)&g0::tensor_dimension53, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 46128), (TfLiteIntArray*)&g0::tensor_dimension55, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 46128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 46128), (TfLiteIntArray*)&g0::tensor_dimension57, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 56928), (TfLiteIntArray*)&g0::tensor_dimension58, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 21600), (TfLiteIntArray*)&g0::tensor_dimension59, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 21600), (TfLiteIntArray*)&g0::tensor_dimension61, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 43200), (TfLiteIntArray*)&g0::tensor_dimension62, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 21600), (TfLiteIntArray*)&g0::tensor_dimension63, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 25200), (TfLiteIntArray*)&g0::tensor_dimension65, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 21600), (TfLiteIntArray*)&g0::tensor_dimension66, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 21600), (TfLiteIntArray*)&g0::tensor_dimension68, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 688), (TfLiteIntArray*)&g0::tensor_dimension69, 675, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 675, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
